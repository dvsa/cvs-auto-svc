/*
 * Vehicles Microservice
 * This is the API spec for the vehicle microservice. Endpoints and parameters only exist for the operations getVehicle and getTechRecords. Other operations within the microservice are out of scope.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bpecete@deloittece.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package vott.models.dto.techrecords;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.time.LocalDate;

import java.io.IOException;
import java.util.Objects;

/**
 * AdrDetailsTankTankDetailsTc3Details
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-04-13T13:30:43.231Z[GMT]")
public class AdrDetailsTankTankDetailsTc3Details {
  /**
   * Optional. Applicable only if vehicleDetails.type contains the word ‘tank’ or ‘battery’.
   */
  @JsonAdapter(Tc3TypeEnum.Adapter.class)
  public enum Tc3TypeEnum {
    INTERMEDIATE("intermediate"),
    PERIODIC("periodic"),
    EXCEPTIONAL("exceptional");

    private String value;

    Tc3TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static Tc3TypeEnum fromValue(String text) {
      for (Tc3TypeEnum b : Tc3TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<Tc3TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Tc3TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Tc3TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return Tc3TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("tc3Type")
  private Tc3TypeEnum tc3Type = null;

  @SerializedName("tc3PeriodicNumber")
  private String tc3PeriodicNumber = null;

  @SerializedName("tc3PeriodicExpiryDate")
  private LocalDate tc3PeriodicExpiryDate = null;

  public AdrDetailsTankTankDetailsTc3Details tc3Type(Tc3TypeEnum tc3Type) {
    this.tc3Type = tc3Type;
    return this;
  }

   /**
   * Optional. Applicable only if vehicleDetails.type contains the word ‘tank’ or ‘battery’.
   * @return tc3Type
  **/
    public Tc3TypeEnum getTc3Type() {
    return tc3Type;
  }

  public void setTc3Type(Tc3TypeEnum tc3Type) {
    this.tc3Type = tc3Type;
  }

  public AdrDetailsTankTankDetailsTc3Details tc3PeriodicNumber(String tc3PeriodicNumber) {
    this.tc3PeriodicNumber = tc3PeriodicNumber;
    return this;
  }

   /**
   * Optional. Applicable only if vehicleDetails.type contains the word ‘tank’ or ‘battery’.
   * @return tc3PeriodicNumber
  **/
    public String getTc3PeriodicNumber() {
    return tc3PeriodicNumber;
  }

  public void setTc3PeriodicNumber(String tc3PeriodicNumber) {
    this.tc3PeriodicNumber = tc3PeriodicNumber;
  }

  public AdrDetailsTankTankDetailsTc3Details tc3PeriodicExpiryDate(LocalDate tc3PeriodicExpiryDate) {
    this.tc3PeriodicExpiryDate = tc3PeriodicExpiryDate;
    return this;
  }

   /**
   * Optional. Date(YYYY-MM-DD). Applicable only if vehicleDetails.type contains the word ‘tank’ or ‘battery’.
   * @return tc3PeriodicExpiryDate
  **/
    public LocalDate getTc3PeriodicExpiryDate() {
    return tc3PeriodicExpiryDate;
  }

  public void setTc3PeriodicExpiryDate(LocalDate tc3PeriodicExpiryDate) {
    this.tc3PeriodicExpiryDate = tc3PeriodicExpiryDate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdrDetailsTankTankDetailsTc3Details adrDetailsTankTankDetailsTc3Details = (AdrDetailsTankTankDetailsTc3Details) o;
    return Objects.equals(this.tc3Type, adrDetailsTankTankDetailsTc3Details.tc3Type) &&
        Objects.equals(this.tc3PeriodicNumber, adrDetailsTankTankDetailsTc3Details.tc3PeriodicNumber) &&
        Objects.equals(this.tc3PeriodicExpiryDate, adrDetailsTankTankDetailsTc3Details.tc3PeriodicExpiryDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tc3Type, tc3PeriodicNumber, tc3PeriodicExpiryDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdrDetailsTankTankDetailsTc3Details {\n");
    
    sb.append("    tc3Type: ").append(toIndentedString(tc3Type)).append("\n");
    sb.append("    tc3PeriodicNumber: ").append(toIndentedString(tc3PeriodicNumber)).append("\n");
    sb.append("    tc3PeriodicExpiryDate: ").append(toIndentedString(tc3PeriodicExpiryDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Vehicles Microservice
 * This is the API spec for the vehicle microservice. Endpoints and parameters only exist for the operations getVehicle and getTechRecords. Other operations within the microservice are out of scope.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bpecete@deloittece.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package vott.models.dto.techrecords;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Objects;

/**
 * Brakes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-04-13T13:30:43.231Z[GMT]")
public class Brakes {
  @SerializedName("brakeCodeOriginal")
  private String brakeCodeOriginal = null;

  @SerializedName("brakeCode")
  private String brakeCode = null;

  @SerializedName("dataTrBrakeOne")
  private String dataTrBrakeOne = null;

  @SerializedName("dataTrBrakeTwo")
  private String dataTrBrakeTwo = null;

  @SerializedName("dataTrBrakeThree")
  private String dataTrBrakeThree = null;

  /**
   * Used only for PSV
   */
  @JsonAdapter(RetarderBrakeOneEnum.Adapter.class)
  public enum RetarderBrakeOneEnum {
    ELECTRIC("electric"),
    EXHAUST("exhaust"),
    FRICTION("friction"),
    HYDRAULIC("hydraulic"),
    OTHER("other"),
    NONE("none");

    private String value;

    RetarderBrakeOneEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RetarderBrakeOneEnum fromValue(String text) {
      for (RetarderBrakeOneEnum b : RetarderBrakeOneEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RetarderBrakeOneEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RetarderBrakeOneEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RetarderBrakeOneEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RetarderBrakeOneEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("retarderBrakeOne")
  private RetarderBrakeOneEnum retarderBrakeOne = null;

  /**
   * Used only for PSV
   */
  @JsonAdapter(RetarderBrakeTwoEnum.Adapter.class)
  public enum RetarderBrakeTwoEnum {
    ELECTRIC("electric"),
    EXHAUST("exhaust"),
    FRICTION("friction"),
    HYDRAULIC("hydraulic"),
    OTHER("other"),
    NONE("none");

    private String value;

    RetarderBrakeTwoEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RetarderBrakeTwoEnum fromValue(String text) {
      for (RetarderBrakeTwoEnum b : RetarderBrakeTwoEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RetarderBrakeTwoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RetarderBrakeTwoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RetarderBrakeTwoEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RetarderBrakeTwoEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("retarderBrakeTwo")
  private RetarderBrakeTwoEnum retarderBrakeTwo = null;

  @SerializedName("dtpNumber")
  private String dtpNumber = null;

  @SerializedName("brakeForceWheelsNotLocked")
  private BrakeForceWheelsNotLocked brakeForceWheelsNotLocked = null;

  @SerializedName("brakeForceWheelsUpToHalfLocked")
  private BrakeForceWheelsUpToHalfLocked brakeForceWheelsUpToHalfLocked = null;

  @SerializedName("loadSensingValve")
  private Boolean loadSensingValve = null;

  @SerializedName("antilockBrakingSystem")
  private Boolean antilockBrakingSystem = null;

  public Brakes brakeCodeOriginal(String brakeCodeOriginal) {
    this.brakeCodeOriginal = brakeCodeOriginal;
    return this;
  }

   /**
   * Used only for PSV
   * @return brakeCodeOriginal
  **/
    public String getBrakeCodeOriginal() {
    return brakeCodeOriginal;
  }

  public void setBrakeCodeOriginal(String brakeCodeOriginal) {
    this.brakeCodeOriginal = brakeCodeOriginal;
  }

  public Brakes brakeCode(String brakeCode) {
    this.brakeCode = brakeCode;
    return this;
  }

   /**
   * Used only for PSV
   * @return brakeCode
  **/
    public String getBrakeCode() {
    return brakeCode;
  }

  public void setBrakeCode(String brakeCode) {
    this.brakeCode = brakeCode;
  }

  public Brakes dataTrBrakeOne(String dataTrBrakeOne) {
    this.dataTrBrakeOne = dataTrBrakeOne;
    return this;
  }

   /**
   * Used only for PSV
   * @return dataTrBrakeOne
  **/
    public String getDataTrBrakeOne() {
    return dataTrBrakeOne;
  }

  public void setDataTrBrakeOne(String dataTrBrakeOne) {
    this.dataTrBrakeOne = dataTrBrakeOne;
  }

  public Brakes dataTrBrakeTwo(String dataTrBrakeTwo) {
    this.dataTrBrakeTwo = dataTrBrakeTwo;
    return this;
  }

   /**
   * Used only for PSV
   * @return dataTrBrakeTwo
  **/
    public String getDataTrBrakeTwo() {
    return dataTrBrakeTwo;
  }

  public void setDataTrBrakeTwo(String dataTrBrakeTwo) {
    this.dataTrBrakeTwo = dataTrBrakeTwo;
  }

  public Brakes dataTrBrakeThree(String dataTrBrakeThree) {
    this.dataTrBrakeThree = dataTrBrakeThree;
    return this;
  }

   /**
   * Used only for PSV
   * @return dataTrBrakeThree
  **/
    public String getDataTrBrakeThree() {
    return dataTrBrakeThree;
  }

  public void setDataTrBrakeThree(String dataTrBrakeThree) {
    this.dataTrBrakeThree = dataTrBrakeThree;
  }

  public Brakes retarderBrakeOne(RetarderBrakeOneEnum retarderBrakeOne) {
    this.retarderBrakeOne = retarderBrakeOne;
    return this;
  }

   /**
   * Used only for PSV
   * @return retarderBrakeOne
  **/
    public RetarderBrakeOneEnum getRetarderBrakeOne() {
    return retarderBrakeOne;
  }

  public void setRetarderBrakeOne(RetarderBrakeOneEnum retarderBrakeOne) {
    this.retarderBrakeOne = retarderBrakeOne;
  }

  public Brakes retarderBrakeTwo(RetarderBrakeTwoEnum retarderBrakeTwo) {
    this.retarderBrakeTwo = retarderBrakeTwo;
    return this;
  }

   /**
   * Used only for PSV
   * @return retarderBrakeTwo
  **/
    public RetarderBrakeTwoEnum getRetarderBrakeTwo() {
    return retarderBrakeTwo;
  }

  public void setRetarderBrakeTwo(RetarderBrakeTwoEnum retarderBrakeTwo) {
    this.retarderBrakeTwo = retarderBrakeTwo;
  }

  public Brakes dtpNumber(String dtpNumber) {
    this.dtpNumber = dtpNumber;
    return this;
  }

   /**
   * Used for PSV, HGV and TRL
   * @return dtpNumber
  **/
    public String getDtpNumber() {
    return dtpNumber;
  }

  public void setDtpNumber(String dtpNumber) {
    this.dtpNumber = dtpNumber;
  }

  public Brakes brakeForceWheelsNotLocked(BrakeForceWheelsNotLocked brakeForceWheelsNotLocked) {
    this.brakeForceWheelsNotLocked = brakeForceWheelsNotLocked;
    return this;
  }

   /**
   * Get brakeForceWheelsNotLocked
   * @return brakeForceWheelsNotLocked
  **/
    public BrakeForceWheelsNotLocked getBrakeForceWheelsNotLocked() {
    return brakeForceWheelsNotLocked;
  }

  public void setBrakeForceWheelsNotLocked(BrakeForceWheelsNotLocked brakeForceWheelsNotLocked) {
    this.brakeForceWheelsNotLocked = brakeForceWheelsNotLocked;
  }

  public Brakes brakeForceWheelsUpToHalfLocked(BrakeForceWheelsUpToHalfLocked brakeForceWheelsUpToHalfLocked) {
    this.brakeForceWheelsUpToHalfLocked = brakeForceWheelsUpToHalfLocked;
    return this;
  }

   /**
   * Get brakeForceWheelsUpToHalfLocked
   * @return brakeForceWheelsUpToHalfLocked
  **/
    public BrakeForceWheelsUpToHalfLocked getBrakeForceWheelsUpToHalfLocked() {
    return brakeForceWheelsUpToHalfLocked;
  }

  public void setBrakeForceWheelsUpToHalfLocked(BrakeForceWheelsUpToHalfLocked brakeForceWheelsUpToHalfLocked) {
    this.brakeForceWheelsUpToHalfLocked = brakeForceWheelsUpToHalfLocked;
  }

  public Brakes loadSensingValve(Boolean loadSensingValve) {
    this.loadSensingValve = loadSensingValve;
    return this;
  }

   /**
   * Used only for TRL
   * @return loadSensingValve
  **/
    public Boolean isLoadSensingValve() {
    return loadSensingValve;
  }

  public void setLoadSensingValve(Boolean loadSensingValve) {
    this.loadSensingValve = loadSensingValve;
  }

  public Brakes antilockBrakingSystem(Boolean antilockBrakingSystem) {
    this.antilockBrakingSystem = antilockBrakingSystem;
    return this;
  }

   /**
   * Used only for TRL
   * @return antilockBrakingSystem
  **/
    public Boolean isAntilockBrakingSystem() {
    return antilockBrakingSystem;
  }

  public void setAntilockBrakingSystem(Boolean antilockBrakingSystem) {
    this.antilockBrakingSystem = antilockBrakingSystem;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Brakes brakes = (Brakes) o;
    return Objects.equals(this.brakeCodeOriginal, brakes.brakeCodeOriginal) &&
        Objects.equals(this.brakeCode, brakes.brakeCode) &&
        Objects.equals(this.dataTrBrakeOne, brakes.dataTrBrakeOne) &&
        Objects.equals(this.dataTrBrakeTwo, brakes.dataTrBrakeTwo) &&
        Objects.equals(this.dataTrBrakeThree, brakes.dataTrBrakeThree) &&
        Objects.equals(this.retarderBrakeOne, brakes.retarderBrakeOne) &&
        Objects.equals(this.retarderBrakeTwo, brakes.retarderBrakeTwo) &&
        Objects.equals(this.dtpNumber, brakes.dtpNumber) &&
        Objects.equals(this.brakeForceWheelsNotLocked, brakes.brakeForceWheelsNotLocked) &&
        Objects.equals(this.brakeForceWheelsUpToHalfLocked, brakes.brakeForceWheelsUpToHalfLocked) &&
        Objects.equals(this.loadSensingValve, brakes.loadSensingValve) &&
        Objects.equals(this.antilockBrakingSystem, brakes.antilockBrakingSystem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brakeCodeOriginal, brakeCode, dataTrBrakeOne, dataTrBrakeTwo, dataTrBrakeThree, retarderBrakeOne, retarderBrakeTwo, dtpNumber, brakeForceWheelsNotLocked, brakeForceWheelsUpToHalfLocked, loadSensingValve, antilockBrakingSystem);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Brakes {\n");
    
    sb.append("    brakeCodeOriginal: ").append(toIndentedString(brakeCodeOriginal)).append("\n");
    sb.append("    brakeCode: ").append(toIndentedString(brakeCode)).append("\n");
    sb.append("    dataTrBrakeOne: ").append(toIndentedString(dataTrBrakeOne)).append("\n");
    sb.append("    dataTrBrakeTwo: ").append(toIndentedString(dataTrBrakeTwo)).append("\n");
    sb.append("    dataTrBrakeThree: ").append(toIndentedString(dataTrBrakeThree)).append("\n");
    sb.append("    retarderBrakeOne: ").append(toIndentedString(retarderBrakeOne)).append("\n");
    sb.append("    retarderBrakeTwo: ").append(toIndentedString(retarderBrakeTwo)).append("\n");
    sb.append("    dtpNumber: ").append(toIndentedString(dtpNumber)).append("\n");
    sb.append("    brakeForceWheelsNotLocked: ").append(toIndentedString(brakeForceWheelsNotLocked)).append("\n");
    sb.append("    brakeForceWheelsUpToHalfLocked: ").append(toIndentedString(brakeForceWheelsUpToHalfLocked)).append("\n");
    sb.append("    loadSensingValve: ").append(toIndentedString(loadSensingValve)).append("\n");
    sb.append("    antilockBrakingSystem: ").append(toIndentedString(antilockBrakingSystem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

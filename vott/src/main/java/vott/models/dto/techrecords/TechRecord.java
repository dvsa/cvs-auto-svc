/*
 * Vehicles Microservice
 * This is the API spec for the vehicle microservice. Endpoints and parameters only exist for the operations getVehicle and getTechRecords. Other operations within the microservice are out of scope.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bpecete@deloittece.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package vott.models.dto.techrecords;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.time.LocalDate;

import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * TechRecord
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-04-13T13:30:43.231Z[GMT]")
public class TechRecord {
  @SerializedName("recordCompleteness")
  private String recordCompleteness = null;

  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("lastUpdatedAt")
  private OffsetDateTime lastUpdatedAt = null;

  @SerializedName("make")
  private String make = null;

  @SerializedName("model")
  private String model = null;

  @SerializedName("functionCode")
  private String functionCode = null;

  /**
   * Used for HGV and PSV
   */
  @JsonAdapter(FuelPropulsionSystemEnum.Adapter.class)
  public enum FuelPropulsionSystemEnum {
    DIESELPETROL("DieselPetrol"),
    HYBRID("Hybrid"),
    ELECTRIC("Electric"),
    CNG("CNG"),
    FUEL_CELL("Fuel cell"),
    LNG("LNG"),
    OTHER("Other");

    private String value;

    FuelPropulsionSystemEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FuelPropulsionSystemEnum fromValue(String text) {
      for (FuelPropulsionSystemEnum b : FuelPropulsionSystemEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FuelPropulsionSystemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FuelPropulsionSystemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FuelPropulsionSystemEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FuelPropulsionSystemEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("fuelPropulsionSystem")
  private FuelPropulsionSystemEnum fuelPropulsionSystem = null;

  @SerializedName("offRoad")
  private Boolean offRoad = null;

  @SerializedName("numberOfWheelsDriven")
  private BigDecimal numberOfWheelsDriven = null;

  /**
   * Used for all vehicle types. Optional for car, lgv and motorcycle.
   */
  @JsonAdapter(EuVehicleCategoryEnum.Adapter.class)
  public enum EuVehicleCategoryEnum {
    M1("m1"),
    M2("m2"),
    M3("m3"),
    N1("n1"),
    N2("n2"),
    N3("n3"),
    O1("o1"),
    O2("o2"),
    O3("o3"),
    O4("o4"),
    L1E_A("l1e-a"),
    L1E("l1e"),
    L2E("l2e"),
    L3E("l3e"),
    L4E("l4e"),
    L5E("l5e"),
    L6E("l6e"),
    L7E("l7e");

    private String value;

    EuVehicleCategoryEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EuVehicleCategoryEnum fromValue(String text) {
      for (EuVehicleCategoryEnum b : EuVehicleCategoryEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EuVehicleCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EuVehicleCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EuVehicleCategoryEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return EuVehicleCategoryEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("euVehicleCategory")
  private EuVehicleCategoryEnum euVehicleCategory = null;

  @SerializedName("emissionsLimit")
  private BigDecimal emissionsLimit = null;

  @SerializedName("departmentalVehicleMarker")
  private Boolean departmentalVehicleMarker = null;

  @SerializedName("authIntoService")
  private AuthIntoService authIntoService = null;

  @SerializedName("lettersOfAuth")
  private LettersOfAuth lettersOfAuth = null;

  @SerializedName("alterationMarker")
  private Boolean alterationMarker = null;

  /**
   * Used for all vehicle types
   */
  @JsonAdapter(ApprovalTypeEnum.Adapter.class)
  public enum ApprovalTypeEnum {
    NTA("NTA"),
    ECTA("ECTA"),
    IVA("IVA"),
    NSSTA("NSSTA"),
    ECSSTA("ECSSTA");

    private String value;

    ApprovalTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ApprovalTypeEnum fromValue(String text) {
      for (ApprovalTypeEnum b : ApprovalTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ApprovalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovalTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ApprovalTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("approvalType")
  private ApprovalTypeEnum approvalType = null;

  @SerializedName("approvalTypeNumber")
  private String approvalTypeNumber = null;

  @SerializedName("variantNumber")
  private String variantNumber = null;

  @SerializedName("variantVersionNumber")
  private String variantVersionNumber = null;

  @SerializedName("grossEecWeight")
  private BigDecimal grossEecWeight = null;

  @SerializedName("trainEecWeight")
  private BigDecimal trainEecWeight = null;

  @SerializedName("maxTrainEecWeight")
  private BigDecimal maxTrainEecWeight = null;

  @SerializedName("applicantDetails")
  private ApplicantDetailsProperties applicantDetails = null;

  @SerializedName("purchaserDetails")
  private PurchaserDetails purchaserDetails = null;

  @SerializedName("manufacturerDetails")
  private ManufacturerDetails manufacturerDetails = null;

  @SerializedName("microfilm")
  private Microfilm microfilm = null;

  @SerializedName("plates")
  private Plates plates = null;

  @SerializedName("chassisMake")
  private String chassisMake = null;

  @SerializedName("chassisModel")
  private String chassisModel = null;

  @SerializedName("bodyMake")
  private String bodyMake = null;

  @SerializedName("bodyModel")
  private String bodyModel = null;

  @SerializedName("modelLiteral")
  private String modelLiteral = null;

  @SerializedName("bodyType")
  private TechRecordBodyType bodyType = null;

  @SerializedName("manufactureYear")
  private BigDecimal manufactureYear = null;

  @SerializedName("regnDate")
  private LocalDate regnDate = null;

  @SerializedName("firstUseDate")
  private LocalDate firstUseDate = null;

  @SerializedName("coifDate")
  private LocalDate coifDate = null;

  @SerializedName("ntaNumber")
  private String ntaNumber = null;

  @SerializedName("coifSerialNumber")
  private String coifSerialNumber = null;

  @SerializedName("coifCertifierName")
  private String coifCertifierName = null;

  @SerializedName("conversionRefNo")
  private String conversionRefNo = null;

  @SerializedName("seatsLowerDeck")
  private BigDecimal seatsLowerDeck = null;

  @SerializedName("seatsUpperDeck")
  private BigDecimal seatsUpperDeck = null;

  @SerializedName("standingCapacity")
  private BigDecimal standingCapacity = null;

  @SerializedName("speedRestriction")
  private BigDecimal speedRestriction = null;

  @SerializedName("speedLimiterMrk")
  private Boolean speedLimiterMrk = null;

  @SerializedName("tachoExemptMrk")
  private Boolean tachoExemptMrk = null;

  @SerializedName("dispensations")
  private String dispensations = null;

  @SerializedName("remarks")
  private String remarks = null;

  @SerializedName("reasonForCreation")
  private String reasonForCreation = null;

  /**
   * Used for all vehicle types - PSV, HGV, TRL, car, lgv, motorcycle
   */
  @JsonAdapter(StatusCodeEnum.Adapter.class)
  public enum StatusCodeEnum {
    ARCHIVED("archived"),
    CURRENT("current"),
    PROVISIONAL("provisional");

    private String value;

    StatusCodeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusCodeEnum fromValue(String text) {
      for (StatusCodeEnum b : StatusCodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusCodeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusCodeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("statusCode")
  private StatusCodeEnum statusCode = null;

  @SerializedName("unladenWeight")
  private BigDecimal unladenWeight = null;

  @SerializedName("grossKerbWeight")
  private BigDecimal grossKerbWeight = null;

  @SerializedName("grossLadenWeight")
  private BigDecimal grossLadenWeight = null;

  @SerializedName("grossGbWeight")
  private BigDecimal grossGbWeight = null;

  @SerializedName("grossDesignWeight")
  private BigDecimal grossDesignWeight = null;

  @SerializedName("trainGbWeight")
  private BigDecimal trainGbWeight = null;

  @SerializedName("trainDesignWeight")
  private BigDecimal trainDesignWeight = null;

  @SerializedName("maxTrainGbWeight")
  private BigDecimal maxTrainGbWeight = null;

  @SerializedName("maxTrainDesignWeight")
  private BigDecimal maxTrainDesignWeight = null;

  @SerializedName("maxLoadOnCoupling")
  private BigDecimal maxLoadOnCoupling = null;

  /**
   * Gets or Sets frameDescription
   */
  @JsonAdapter(FrameDescriptionEnum.Adapter.class)
  public enum FrameDescriptionEnum {
    CHANNEL_SECTION("Channel section"),
    SPACE_FRAME("Space frame"),
    I_SECTION("I section"),
    TUBULAR("Tubular"),
    FRAME_SECTION("Frame section"),
    OTHER("Other"),
    INTEGRAL("integral"),
    BOX_SECTION("Box section"),
    U_SECTION("U section");

    private String value;

    FrameDescriptionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FrameDescriptionEnum fromValue(String text) {
      for (FrameDescriptionEnum b : FrameDescriptionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FrameDescriptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrameDescriptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrameDescriptionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FrameDescriptionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("frameDescription")
  private FrameDescriptionEnum frameDescription = null;

  @SerializedName("tyreUseCode")
  private String tyreUseCode = null;

  @SerializedName("roadFriendly")
  private Boolean roadFriendly = null;

  @SerializedName("drawbarCouplingFitted")
  private Boolean drawbarCouplingFitted = null;

  @SerializedName("euroStandard")
  private String euroStandard = null;

  @SerializedName("suspensionType")
  private String suspensionType = null;

  @SerializedName("couplingType")
  private String couplingType = null;

  @SerializedName("dimensions")
  private TechRecordDimensions dimensions = null;

  @SerializedName("frontAxleTo5thWheelMin")
  private BigDecimal frontAxleTo5thWheelMin = null;

  @SerializedName("frontAxleTo5thWheelMax")
  private BigDecimal frontAxleTo5thWheelMax = null;

  @SerializedName("frontAxleTo5thWheelCouplingMin")
  private BigDecimal frontAxleTo5thWheelCouplingMin = null;

  @SerializedName("frontAxleTo5thWheelCouplingMax")
  private BigDecimal frontAxleTo5thWheelCouplingMax = null;

  @SerializedName("frontAxleToRearAxle")
  private BigDecimal frontAxleToRearAxle = null;

  @SerializedName("rearAxleToRearTrl")
  private BigDecimal rearAxleToRearTrl = null;

  @SerializedName("couplingCenterToRearAxleMin")
  private BigDecimal couplingCenterToRearAxleMin = null;

  @SerializedName("couplingCenterToRearAxleMax")
  private BigDecimal couplingCenterToRearAxleMax = null;

  @SerializedName("couplingCenterToRearTrlMin")
  private BigDecimal couplingCenterToRearTrlMin = null;

  @SerializedName("couplingCenterToRearTrlMax")
  private BigDecimal couplingCenterToRearTrlMax = null;

  @SerializedName("centreOfRearmostAxleToRearOfTrl")
  private BigDecimal centreOfRearmostAxleToRearOfTrl = null;

  @SerializedName("notes")
  private String notes = null;

  @SerializedName("noOfAxles")
  private BigDecimal noOfAxles = null;

  @SerializedName("brakeCode")
  private String brakeCode = null;

  @SerializedName("adrDetails")
  private AdrDetails adrDetails = null;

  @SerializedName("createdByName")
  private String createdByName = null;

  @SerializedName("createdById")
  private String createdById = null;

  @SerializedName("lastUpdatedByName")
  private String lastUpdatedByName = null;

  @SerializedName("lastUpdatedById")
  private String lastUpdatedById = null;

  /**
   * set updateType to adrUpdate on the archived tech record, when a tech record is archived
   */
  @JsonAdapter(UpdateTypeEnum.Adapter.class)
  public enum UpdateTypeEnum {
    ADRUPDATE("adrUpdate"),
    TECHRECORDUPDATE("techRecordUpdate");

    private String value;

    UpdateTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static UpdateTypeEnum fromValue(String text) {
      for (UpdateTypeEnum b : UpdateTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<UpdateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpdateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpdateTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return UpdateTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("updateType")
  private UpdateTypeEnum updateType = null;

  @SerializedName("vehicleClass")
  private TechRecordVehicleClass vehicleClass = null;

  @SerializedName("vehicleSubclass")
  private List<String> vehicleSubclass = null;

  /**
   * Used for all vehicle types - PSV, HGV, TRL, car, lgv, motorcycle
   */
  @JsonAdapter(VehicleTypeEnum.Adapter.class)
  public enum VehicleTypeEnum {
    PSV("psv"),
    HGV("hgv"),
    TRL("trl"),
    CAR("car"),
    LGV("lgv"),
    MOTORCYCLE("motorcycle");

    private String value;

    VehicleTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static VehicleTypeEnum fromValue(String text) {
      for (VehicleTypeEnum b : VehicleTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<VehicleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VehicleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VehicleTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return VehicleTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("vehicleType")
  private VehicleTypeEnum vehicleType = null;

  /**
   * Used only for PSV
   */
  @JsonAdapter(VehicleSizeEnum.Adapter.class)
  public enum VehicleSizeEnum {
    SMALL("small"),
    LARGE("large");

    private String value;

    VehicleSizeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static VehicleSizeEnum fromValue(String text) {
      for (VehicleSizeEnum b : VehicleSizeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<VehicleSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VehicleSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VehicleSizeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return VehicleSizeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("vehicleSize")
  private VehicleSizeEnum vehicleSize = null;

  @SerializedName("numberOfSeatbelts")
  private String numberOfSeatbelts = null;

  @SerializedName("seatbeltInstallationApprovalDate")
  private String seatbeltInstallationApprovalDate = null;

  /**
   * Used for all vehicle types - PSV, HGV and TRL
   */
  @JsonAdapter(VehicleConfigurationEnum.Adapter.class)
  public enum VehicleConfigurationEnum {
    RIGID("rigid"),
    ARTICULATED("articulated"),
    CENTRE_AXLE_DRAWBAR("centre axle drawbar"),
    SEMI_CAR_TRANSPORTER("semi-car transporter"),
    SEMI_TRAILER("semi-trailer"),
    LOW_LOADER("low loader"),
    OTHER("other"),
    DRAWBAR("drawbar"),
    FOUR_IN_LINE("four-in-line"),
    DOLLY("dolly"),
    FULL_DRAWBAR("full drawbar");

    private String value;

    VehicleConfigurationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static VehicleConfigurationEnum fromValue(String text) {
      for (VehicleConfigurationEnum b : VehicleConfigurationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<VehicleConfigurationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VehicleConfigurationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VehicleConfigurationEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return VehicleConfigurationEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("vehicleConfiguration")
  private VehicleConfigurationEnum vehicleConfiguration = null;

  @SerializedName("brakes")
  private Brakes brakes = null;

  @SerializedName("axles")
  private Axles axles = null;

  @SerializedName("dda")
  private Dda dda = null;

  public TechRecord recordCompleteness(String recordCompleteness) {
    this.recordCompleteness = recordCompleteness;
    return this;
  }

   /**
   * Defines the level of completeness for a tech record. If it is set to \&quot;skeleton\&quot; then it means the vehicle does not meet the minimum requirements to be tested. If it is \&quot;testable\&quot; it means the vehicle meets the minimum requirements to be tested but is not complete from a business perspective. If \&quot;complete\&quot; then the vehicle it is complete form a business perspective also.
   * @return recordCompleteness
  **/
    public String getRecordCompleteness() {
    return recordCompleteness;
  }

  public void setRecordCompleteness(String recordCompleteness) {
    this.recordCompleteness = recordCompleteness;
  }

  public TechRecord createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Used for all vehicle types
   * @return createdAt
  **/
    public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public TechRecord lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

   /**
   * Used for all vehicle types
   * @return lastUpdatedAt
  **/
    public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }

  public TechRecord make(String make) {
    this.make = make;
    return this;
  }

   /**
   * Used only for HGV and TRL
   * @return make
  **/
    public String getMake() {
    return make;
  }

  public void setMake(String make) {
    this.make = make;
  }

  public TechRecord model(String model) {
    this.model = model;
    return this;
  }

   /**
   * Used only for HGV and TRL
   * @return model
  **/
    public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }

  public TechRecord functionCode(String functionCode) {
    this.functionCode = functionCode;
    return this;
  }

   /**
   * Used for all vehicle types
   * @return functionCode
  **/
    public String getFunctionCode() {
    return functionCode;
  }

  public void setFunctionCode(String functionCode) {
    this.functionCode = functionCode;
  }

  public TechRecord fuelPropulsionSystem(FuelPropulsionSystemEnum fuelPropulsionSystem) {
    this.fuelPropulsionSystem = fuelPropulsionSystem;
    return this;
  }

   /**
   * Used for HGV and PSV
   * @return fuelPropulsionSystem
  **/
    public FuelPropulsionSystemEnum getFuelPropulsionSystem() {
    return fuelPropulsionSystem;
  }

  public void setFuelPropulsionSystem(FuelPropulsionSystemEnum fuelPropulsionSystem) {
    this.fuelPropulsionSystem = fuelPropulsionSystem;
  }

  public TechRecord offRoad(Boolean offRoad) {
    this.offRoad = offRoad;
    return this;
  }

   /**
   * Used only for HGV
   * @return offRoad
  **/
    public Boolean isOffRoad() {
    return offRoad;
  }

  public void setOffRoad(Boolean offRoad) {
    this.offRoad = offRoad;
  }

  public TechRecord numberOfWheelsDriven(BigDecimal numberOfWheelsDriven) {
    this.numberOfWheelsDriven = numberOfWheelsDriven;
    return this;
  }

   /**
   * Used for motorcycles to derive the test codes for specialist tests. Used for HGV and PSV.
   * maximum: 9999
   * @return numberOfWheelsDriven
  **/
    public BigDecimal getNumberOfWheelsDriven() {
    return numberOfWheelsDriven;
  }

  public void setNumberOfWheelsDriven(BigDecimal numberOfWheelsDriven) {
    this.numberOfWheelsDriven = numberOfWheelsDriven;
  }

  public TechRecord euVehicleCategory(EuVehicleCategoryEnum euVehicleCategory) {
    this.euVehicleCategory = euVehicleCategory;
    return this;
  }

   /**
   * Used for all vehicle types. Optional for car, lgv and motorcycle.
   * @return euVehicleCategory
  **/
    public EuVehicleCategoryEnum getEuVehicleCategory() {
    return euVehicleCategory;
  }

  public void setEuVehicleCategory(EuVehicleCategoryEnum euVehicleCategory) {
    this.euVehicleCategory = euVehicleCategory;
  }

  public TechRecord emissionsLimit(BigDecimal emissionsLimit) {
    this.emissionsLimit = emissionsLimit;
    return this;
  }

   /**
   * Used only for HGV and PSV
   * maximum: 99
   * @return emissionsLimit
  **/
    public BigDecimal getEmissionsLimit() {
    return emissionsLimit;
  }

  public void setEmissionsLimit(BigDecimal emissionsLimit) {
    this.emissionsLimit = emissionsLimit;
  }

  public TechRecord departmentalVehicleMarker(Boolean departmentalVehicleMarker) {
    this.departmentalVehicleMarker = departmentalVehicleMarker;
    return this;
  }

   /**
   * Used for all vehicle types
   * @return departmentalVehicleMarker
  **/
    public Boolean isDepartmentalVehicleMarker() {
    return departmentalVehicleMarker;
  }

  public void setDepartmentalVehicleMarker(Boolean departmentalVehicleMarker) {
    this.departmentalVehicleMarker = departmentalVehicleMarker;
  }

  public TechRecord authIntoService(AuthIntoService authIntoService) {
    this.authIntoService = authIntoService;
    return this;
  }

   /**
   * Get authIntoService
   * @return authIntoService
  **/
    public AuthIntoService getAuthIntoService() {
    return authIntoService;
  }

  public void setAuthIntoService(AuthIntoService authIntoService) {
    this.authIntoService = authIntoService;
  }

  public TechRecord lettersOfAuth(LettersOfAuth lettersOfAuth) {
    this.lettersOfAuth = lettersOfAuth;
    return this;
  }

   /**
   * Get lettersOfAuth
   * @return lettersOfAuth
  **/
    public LettersOfAuth getLettersOfAuth() {
    return lettersOfAuth;
  }

  public void setLettersOfAuth(LettersOfAuth lettersOfAuth) {
    this.lettersOfAuth = lettersOfAuth;
  }

  public TechRecord alterationMarker(Boolean alterationMarker) {
    this.alterationMarker = alterationMarker;
    return this;
  }

   /**
   * Used for all vehicle types
   * @return alterationMarker
  **/
    public Boolean isAlterationMarker() {
    return alterationMarker;
  }

  public void setAlterationMarker(Boolean alterationMarker) {
    this.alterationMarker = alterationMarker;
  }

  public TechRecord approvalType(ApprovalTypeEnum approvalType) {
    this.approvalType = approvalType;
    return this;
  }

   /**
   * Used for all vehicle types
   * @return approvalType
  **/
    public ApprovalTypeEnum getApprovalType() {
    return approvalType;
  }

  public void setApprovalType(ApprovalTypeEnum approvalType) {
    this.approvalType = approvalType;
  }

  public TechRecord approvalTypeNumber(String approvalTypeNumber) {
    this.approvalTypeNumber = approvalTypeNumber;
    return this;
  }

   /**
   * Used for all vehicle types
   * @return approvalTypeNumber
  **/
    public String getApprovalTypeNumber() {
    return approvalTypeNumber;
  }

  public void setApprovalTypeNumber(String approvalTypeNumber) {
    this.approvalTypeNumber = approvalTypeNumber;
  }

  public TechRecord variantNumber(String variantNumber) {
    this.variantNumber = variantNumber;
    return this;
  }

   /**
   * Used for all vehicle types
   * @return variantNumber
  **/
    public String getVariantNumber() {
    return variantNumber;
  }

  public void setVariantNumber(String variantNumber) {
    this.variantNumber = variantNumber;
  }

  public TechRecord variantVersionNumber(String variantVersionNumber) {
    this.variantVersionNumber = variantVersionNumber;
    return this;
  }

   /**
   * Used for all vehicle types
   * @return variantVersionNumber
  **/
    public String getVariantVersionNumber() {
    return variantVersionNumber;
  }

  public void setVariantVersionNumber(String variantVersionNumber) {
    this.variantVersionNumber = variantVersionNumber;
  }

  public TechRecord grossEecWeight(BigDecimal grossEecWeight) {
    this.grossEecWeight = grossEecWeight;
    return this;
  }

   /**
   * Used only for HGV and TRL
   * maximum: 99999
   * @return grossEecWeight
  **/
    public BigDecimal getGrossEecWeight() {
    return grossEecWeight;
  }

  public void setGrossEecWeight(BigDecimal grossEecWeight) {
    this.grossEecWeight = grossEecWeight;
  }

  public TechRecord trainEecWeight(BigDecimal trainEecWeight) {
    this.trainEecWeight = trainEecWeight;
    return this;
  }

   /**
   * Used only for HGV
   * maximum: 99999
   * @return trainEecWeight
  **/
    public BigDecimal getTrainEecWeight() {
    return trainEecWeight;
  }

  public void setTrainEecWeight(BigDecimal trainEecWeight) {
    this.trainEecWeight = trainEecWeight;
  }

  public TechRecord maxTrainEecWeight(BigDecimal maxTrainEecWeight) {
    this.maxTrainEecWeight = maxTrainEecWeight;
    return this;
  }

   /**
   * Used only for HGV
   * maximum: 99999
   * @return maxTrainEecWeight
  **/
    public BigDecimal getMaxTrainEecWeight() {
    return maxTrainEecWeight;
  }

  public void setMaxTrainEecWeight(BigDecimal maxTrainEecWeight) {
    this.maxTrainEecWeight = maxTrainEecWeight;
  }

  public TechRecord applicantDetails(ApplicantDetailsProperties applicantDetails) {
    this.applicantDetails = applicantDetails;
    return this;
  }

   /**
   * Get applicantDetails
   * @return applicantDetails
  **/
    public ApplicantDetailsProperties getApplicantDetails() {
    return applicantDetails;
  }

  public void setApplicantDetails(ApplicantDetailsProperties applicantDetails) {
    this.applicantDetails = applicantDetails;
  }

  public TechRecord purchaserDetails(PurchaserDetails purchaserDetails) {
    this.purchaserDetails = purchaserDetails;
    return this;
  }

   /**
   * Get purchaserDetails
   * @return purchaserDetails
  **/
    public PurchaserDetails getPurchaserDetails() {
    return purchaserDetails;
  }

  public void setPurchaserDetails(PurchaserDetails purchaserDetails) {
    this.purchaserDetails = purchaserDetails;
  }

  public TechRecord manufacturerDetails(ManufacturerDetails manufacturerDetails) {
    this.manufacturerDetails = manufacturerDetails;
    return this;
  }

   /**
   * Get manufacturerDetails
   * @return manufacturerDetails
  **/
    public ManufacturerDetails getManufacturerDetails() {
    return manufacturerDetails;
  }

  public void setManufacturerDetails(ManufacturerDetails manufacturerDetails) {
    this.manufacturerDetails = manufacturerDetails;
  }

  public TechRecord microfilm(Microfilm microfilm) {
    this.microfilm = microfilm;
    return this;
  }

   /**
   * Get microfilm
   * @return microfilm
  **/
    public Microfilm getMicrofilm() {
    return microfilm;
  }

  public void setMicrofilm(Microfilm microfilm) {
    this.microfilm = microfilm;
  }

  public TechRecord plates(Plates plates) {
    this.plates = plates;
    return this;
  }

   /**
   * Get plates
   * @return plates
  **/
    public Plates getPlates() {
    return plates;
  }

  public void setPlates(Plates plates) {
    this.plates = plates;
  }

  public TechRecord chassisMake(String chassisMake) {
    this.chassisMake = chassisMake;
    return this;
  }

   /**
   * Used only for PSV
   * @return chassisMake
  **/
    public String getChassisMake() {
    return chassisMake;
  }

  public void setChassisMake(String chassisMake) {
    this.chassisMake = chassisMake;
  }

  public TechRecord chassisModel(String chassisModel) {
    this.chassisModel = chassisModel;
    return this;
  }

   /**
   * Used only for PSV
   * @return chassisModel
  **/
    public String getChassisModel() {
    return chassisModel;
  }

  public void setChassisModel(String chassisModel) {
    this.chassisModel = chassisModel;
  }

  public TechRecord bodyMake(String bodyMake) {
    this.bodyMake = bodyMake;
    return this;
  }

   /**
   * Used only for PSV
   * @return bodyMake
  **/
    public String getBodyMake() {
    return bodyMake;
  }

  public void setBodyMake(String bodyMake) {
    this.bodyMake = bodyMake;
  }

  public TechRecord bodyModel(String bodyModel) {
    this.bodyModel = bodyModel;
    return this;
  }

   /**
   * Used only for PSV
   * @return bodyModel
  **/
    public String getBodyModel() {
    return bodyModel;
  }

  public void setBodyModel(String bodyModel) {
    this.bodyModel = bodyModel;
  }

  public TechRecord modelLiteral(String modelLiteral) {
    this.modelLiteral = modelLiteral;
    return this;
  }

   /**
   * Used only for PSV
   * @return modelLiteral
  **/
    public String getModelLiteral() {
    return modelLiteral;
  }

  public void setModelLiteral(String modelLiteral) {
    this.modelLiteral = modelLiteral;
  }

  public TechRecord bodyType(TechRecordBodyType bodyType) {
    this.bodyType = bodyType;
    return this;
  }

   /**
   * Get bodyType
   * @return bodyType
  **/
    public TechRecordBodyType getBodyType() {
    return bodyType;
  }

  public void setBodyType(TechRecordBodyType bodyType) {
    this.bodyType = bodyType;
  }

  public TechRecord manufactureYear(BigDecimal manufactureYear) {
    this.manufactureYear = manufactureYear;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV, TRL, car, lgv, motorcycle
   * maximum: 9999
   * @return manufactureYear
  **/
    public BigDecimal getManufactureYear() {
    return manufactureYear;
  }

  public void setManufactureYear(BigDecimal manufactureYear) {
    this.manufactureYear = manufactureYear;
  }

  public TechRecord regnDate(LocalDate regnDate) {
    this.regnDate = regnDate;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV, TRL, car, lgv, motorcycle
   * @return regnDate
  **/
    public LocalDate getRegnDate() {
    return regnDate;
  }

  public void setRegnDate(LocalDate regnDate) {
    this.regnDate = regnDate;
  }

  public TechRecord firstUseDate(LocalDate firstUseDate) {
    this.firstUseDate = firstUseDate;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV and TRL
   * @return firstUseDate
  **/
    public LocalDate getFirstUseDate() {
    return firstUseDate;
  }

  public void setFirstUseDate(LocalDate firstUseDate) {
    this.firstUseDate = firstUseDate;
  }

  public TechRecord coifDate(LocalDate coifDate) {
    this.coifDate = coifDate;
    return this;
  }

   /**
   * Used only for PSV
   * @return coifDate
  **/
    public LocalDate getCoifDate() {
    return coifDate;
  }

  public void setCoifDate(LocalDate coifDate) {
    this.coifDate = coifDate;
  }

  public TechRecord ntaNumber(String ntaNumber) {
    this.ntaNumber = ntaNumber;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV and TRL
   * @return ntaNumber
  **/
    public String getNtaNumber() {
    return ntaNumber;
  }

  public void setNtaNumber(String ntaNumber) {
    this.ntaNumber = ntaNumber;
  }

  public TechRecord coifSerialNumber(String coifSerialNumber) {
    this.coifSerialNumber = coifSerialNumber;
    return this;
  }

   /**
   * Used only for PSV
   * @return coifSerialNumber
  **/
    public String getCoifSerialNumber() {
    return coifSerialNumber;
  }

  public void setCoifSerialNumber(String coifSerialNumber) {
    this.coifSerialNumber = coifSerialNumber;
  }

  public TechRecord coifCertifierName(String coifCertifierName) {
    this.coifCertifierName = coifCertifierName;
    return this;
  }

   /**
   * Used only for PSV
   * @return coifCertifierName
  **/
    public String getCoifCertifierName() {
    return coifCertifierName;
  }

  public void setCoifCertifierName(String coifCertifierName) {
    this.coifCertifierName = coifCertifierName;
  }

  public TechRecord conversionRefNo(String conversionRefNo) {
    this.conversionRefNo = conversionRefNo;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV and TRL
   * @return conversionRefNo
  **/
    public String getConversionRefNo() {
    return conversionRefNo;
  }

  public void setConversionRefNo(String conversionRefNo) {
    this.conversionRefNo = conversionRefNo;
  }

  public TechRecord seatsLowerDeck(BigDecimal seatsLowerDeck) {
    this.seatsLowerDeck = seatsLowerDeck;
    return this;
  }

   /**
   * Used only for PSV
   * maximum: 999
   * @return seatsLowerDeck
  **/
    public BigDecimal getSeatsLowerDeck() {
    return seatsLowerDeck;
  }

  public void setSeatsLowerDeck(BigDecimal seatsLowerDeck) {
    this.seatsLowerDeck = seatsLowerDeck;
  }

  public TechRecord seatsUpperDeck(BigDecimal seatsUpperDeck) {
    this.seatsUpperDeck = seatsUpperDeck;
    return this;
  }

   /**
   * Used only for PSV
   * maximum: 99
   * @return seatsUpperDeck
  **/
    public BigDecimal getSeatsUpperDeck() {
    return seatsUpperDeck;
  }

  public void setSeatsUpperDeck(BigDecimal seatsUpperDeck) {
    this.seatsUpperDeck = seatsUpperDeck;
  }

  public TechRecord standingCapacity(BigDecimal standingCapacity) {
    this.standingCapacity = standingCapacity;
    return this;
  }

   /**
   * Used only for PSV
   * maximum: 999
   * @return standingCapacity
  **/
    public BigDecimal getStandingCapacity() {
    return standingCapacity;
  }

  public void setStandingCapacity(BigDecimal standingCapacity) {
    this.standingCapacity = standingCapacity;
  }

  public TechRecord speedRestriction(BigDecimal speedRestriction) {
    this.speedRestriction = speedRestriction;
    return this;
  }

   /**
   * Used only for PSV
   * maximum: 99
   * @return speedRestriction
  **/
    public BigDecimal getSpeedRestriction() {
    return speedRestriction;
  }

  public void setSpeedRestriction(BigDecimal speedRestriction) {
    this.speedRestriction = speedRestriction;
  }

  public TechRecord speedLimiterMrk(Boolean speedLimiterMrk) {
    this.speedLimiterMrk = speedLimiterMrk;
    return this;
  }

   /**
   * Used only for PSV and HGV
   * @return speedLimiterMrk
  **/
    public Boolean isSpeedLimiterMrk() {
    return speedLimiterMrk;
  }

  public void setSpeedLimiterMrk(Boolean speedLimiterMrk) {
    this.speedLimiterMrk = speedLimiterMrk;
  }

  public TechRecord tachoExemptMrk(Boolean tachoExemptMrk) {
    this.tachoExemptMrk = tachoExemptMrk;
    return this;
  }

   /**
   * Used only for PSV and HGV
   * @return tachoExemptMrk
  **/
    public Boolean isTachoExemptMrk() {
    return tachoExemptMrk;
  }

  public void setTachoExemptMrk(Boolean tachoExemptMrk) {
    this.tachoExemptMrk = tachoExemptMrk;
  }

  public TechRecord dispensations(String dispensations) {
    this.dispensations = dispensations;
    return this;
  }

   /**
   * Used only for PSV
   * @return dispensations
  **/
    public String getDispensations() {
    return dispensations;
  }

  public void setDispensations(String dispensations) {
    this.dispensations = dispensations;
  }

  public TechRecord remarks(String remarks) {
    this.remarks = remarks;
    return this;
  }

   /**
   * Used for PSV, car, lgv and motorcycle
   * @return remarks
  **/
    public String getRemarks() {
    return remarks;
  }

  public void setRemarks(String remarks) {
    this.remarks = remarks;
  }

  public TechRecord reasonForCreation(String reasonForCreation) {
    this.reasonForCreation = reasonForCreation;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV, TRL, car, lgv and motorcycle
   * @return reasonForCreation
  **/
    public String getReasonForCreation() {
    return reasonForCreation;
  }

  public void setReasonForCreation(String reasonForCreation) {
    this.reasonForCreation = reasonForCreation;
  }

  public TechRecord statusCode(StatusCodeEnum statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV, TRL, car, lgv, motorcycle
   * @return statusCode
  **/
    public StatusCodeEnum getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(StatusCodeEnum statusCode) {
    this.statusCode = statusCode;
  }

  public TechRecord unladenWeight(BigDecimal unladenWeight) {
    this.unladenWeight = unladenWeight;
    return this;
  }

   /**
   * Used only for PSV
   * maximum: 99999
   * @return unladenWeight
  **/
    public BigDecimal getUnladenWeight() {
    return unladenWeight;
  }

  public void setUnladenWeight(BigDecimal unladenWeight) {
    this.unladenWeight = unladenWeight;
  }

  public TechRecord grossKerbWeight(BigDecimal grossKerbWeight) {
    this.grossKerbWeight = grossKerbWeight;
    return this;
  }

   /**
   * Used only for PSV
   * maximum: 99999
   * @return grossKerbWeight
  **/
    public BigDecimal getGrossKerbWeight() {
    return grossKerbWeight;
  }

  public void setGrossKerbWeight(BigDecimal grossKerbWeight) {
    this.grossKerbWeight = grossKerbWeight;
  }

  public TechRecord grossLadenWeight(BigDecimal grossLadenWeight) {
    this.grossLadenWeight = grossLadenWeight;
    return this;
  }

   /**
   * Used only for PSV
   * maximum: 99999
   * @return grossLadenWeight
  **/
    public BigDecimal getGrossLadenWeight() {
    return grossLadenWeight;
  }

  public void setGrossLadenWeight(BigDecimal grossLadenWeight) {
    this.grossLadenWeight = grossLadenWeight;
  }

  public TechRecord grossGbWeight(BigDecimal grossGbWeight) {
    this.grossGbWeight = grossGbWeight;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV and TRL
   * maximum: 99999
   * @return grossGbWeight
  **/
    public BigDecimal getGrossGbWeight() {
    return grossGbWeight;
  }

  public void setGrossGbWeight(BigDecimal grossGbWeight) {
    this.grossGbWeight = grossGbWeight;
  }

  public TechRecord grossDesignWeight(BigDecimal grossDesignWeight) {
    this.grossDesignWeight = grossDesignWeight;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV and TRL
   * maximum: 99999
   * @return grossDesignWeight
  **/
    public BigDecimal getGrossDesignWeight() {
    return grossDesignWeight;
  }

  public void setGrossDesignWeight(BigDecimal grossDesignWeight) {
    this.grossDesignWeight = grossDesignWeight;
  }

  public TechRecord trainGbWeight(BigDecimal trainGbWeight) {
    this.trainGbWeight = trainGbWeight;
    return this;
  }

   /**
   * Used only for HGV
   * maximum: 99999
   * @return trainGbWeight
  **/
    public BigDecimal getTrainGbWeight() {
    return trainGbWeight;
  }

  public void setTrainGbWeight(BigDecimal trainGbWeight) {
    this.trainGbWeight = trainGbWeight;
  }

  public TechRecord trainDesignWeight(BigDecimal trainDesignWeight) {
    this.trainDesignWeight = trainDesignWeight;
    return this;
  }

   /**
   * Used only for HGV and PSV
   * maximum: 99999
   * @return trainDesignWeight
  **/
    public BigDecimal getTrainDesignWeight() {
    return trainDesignWeight;
  }

  public void setTrainDesignWeight(BigDecimal trainDesignWeight) {
    this.trainDesignWeight = trainDesignWeight;
  }

  public TechRecord maxTrainGbWeight(BigDecimal maxTrainGbWeight) {
    this.maxTrainGbWeight = maxTrainGbWeight;
    return this;
  }

   /**
   * Used only for HGV and PSV. Optional for PSV
   * maximum: 99999
   * @return maxTrainGbWeight
  **/
    public BigDecimal getMaxTrainGbWeight() {
    return maxTrainGbWeight;
  }

  public void setMaxTrainGbWeight(BigDecimal maxTrainGbWeight) {
    this.maxTrainGbWeight = maxTrainGbWeight;
  }

  public TechRecord maxTrainDesignWeight(BigDecimal maxTrainDesignWeight) {
    this.maxTrainDesignWeight = maxTrainDesignWeight;
    return this;
  }

   /**
   * Used only for HGV
   * maximum: 99999
   * @return maxTrainDesignWeight
  **/
    public BigDecimal getMaxTrainDesignWeight() {
    return maxTrainDesignWeight;
  }

  public void setMaxTrainDesignWeight(BigDecimal maxTrainDesignWeight) {
    this.maxTrainDesignWeight = maxTrainDesignWeight;
  }

  public TechRecord maxLoadOnCoupling(BigDecimal maxLoadOnCoupling) {
    this.maxLoadOnCoupling = maxLoadOnCoupling;
    return this;
  }

   /**
   * Used only for TRL
   * maximum: 99999
   * @return maxLoadOnCoupling
  **/
    public BigDecimal getMaxLoadOnCoupling() {
    return maxLoadOnCoupling;
  }

  public void setMaxLoadOnCoupling(BigDecimal maxLoadOnCoupling) {
    this.maxLoadOnCoupling = maxLoadOnCoupling;
  }

  public TechRecord frameDescription(FrameDescriptionEnum frameDescription) {
    this.frameDescription = frameDescription;
    return this;
  }

   /**
   * Get frameDescription
   * @return frameDescription
  **/
    public FrameDescriptionEnum getFrameDescription() {
    return frameDescription;
  }

  public void setFrameDescription(FrameDescriptionEnum frameDescription) {
    this.frameDescription = frameDescription;
  }

  public TechRecord tyreUseCode(String tyreUseCode) {
    this.tyreUseCode = tyreUseCode;
    return this;
  }

   /**
   * Used only for HGV and TRL
   * @return tyreUseCode
  **/
    public String getTyreUseCode() {
    return tyreUseCode;
  }

  public void setTyreUseCode(String tyreUseCode) {
    this.tyreUseCode = tyreUseCode;
  }

  public TechRecord roadFriendly(Boolean roadFriendly) {
    this.roadFriendly = roadFriendly;
    return this;
  }

   /**
   * Used only for HGV and TRL
   * @return roadFriendly
  **/
    public Boolean isRoadFriendly() {
    return roadFriendly;
  }

  public void setRoadFriendly(Boolean roadFriendly) {
    this.roadFriendly = roadFriendly;
  }

  public TechRecord drawbarCouplingFitted(Boolean drawbarCouplingFitted) {
    this.drawbarCouplingFitted = drawbarCouplingFitted;
    return this;
  }

   /**
   * Used only for HGV
   * @return drawbarCouplingFitted
  **/
    public Boolean isDrawbarCouplingFitted() {
    return drawbarCouplingFitted;
  }

  public void setDrawbarCouplingFitted(Boolean drawbarCouplingFitted) {
    this.drawbarCouplingFitted = drawbarCouplingFitted;
  }

  public TechRecord euroStandard(String euroStandard) {
    this.euroStandard = euroStandard;
    return this;
  }

   /**
   * Used for HGV and PSV
   * @return euroStandard
  **/
    public String getEuroStandard() {
    return euroStandard;
  }

  public void setEuroStandard(String euroStandard) {
    this.euroStandard = euroStandard;
  }

  public TechRecord suspensionType(String suspensionType) {
    this.suspensionType = suspensionType;
    return this;
  }

   /**
   * Used only for TRL
   * @return suspensionType
  **/
    public String getSuspensionType() {
    return suspensionType;
  }

  public void setSuspensionType(String suspensionType) {
    this.suspensionType = suspensionType;
  }

  public TechRecord couplingType(String couplingType) {
    this.couplingType = couplingType;
    return this;
  }

   /**
   * Used only for TRL
   * @return couplingType
  **/
    public String getCouplingType() {
    return couplingType;
  }

  public void setCouplingType(String couplingType) {
    this.couplingType = couplingType;
  }

  public TechRecord dimensions(TechRecordDimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

   /**
   * Get dimensions
   * @return dimensions
  **/
    public TechRecordDimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(TechRecordDimensions dimensions) {
    this.dimensions = dimensions;
  }

  public TechRecord frontAxleTo5thWheelMin(BigDecimal frontAxleTo5thWheelMin) {
    this.frontAxleTo5thWheelMin = frontAxleTo5thWheelMin;
    return this;
  }

   /**
   * Used only for HGV
   * maximum: 99999
   * @return frontAxleTo5thWheelMin
  **/
    public BigDecimal getFrontAxleTo5thWheelMin() {
    return frontAxleTo5thWheelMin;
  }

  public void setFrontAxleTo5thWheelMin(BigDecimal frontAxleTo5thWheelMin) {
    this.frontAxleTo5thWheelMin = frontAxleTo5thWheelMin;
  }

  public TechRecord frontAxleTo5thWheelMax(BigDecimal frontAxleTo5thWheelMax) {
    this.frontAxleTo5thWheelMax = frontAxleTo5thWheelMax;
    return this;
  }

   /**
   * Used only for HGV
   * maximum: 99999
   * @return frontAxleTo5thWheelMax
  **/
    public BigDecimal getFrontAxleTo5thWheelMax() {
    return frontAxleTo5thWheelMax;
  }

  public void setFrontAxleTo5thWheelMax(BigDecimal frontAxleTo5thWheelMax) {
    this.frontAxleTo5thWheelMax = frontAxleTo5thWheelMax;
  }

  public TechRecord frontAxleTo5thWheelCouplingMin(BigDecimal frontAxleTo5thWheelCouplingMin) {
    this.frontAxleTo5thWheelCouplingMin = frontAxleTo5thWheelCouplingMin;
    return this;
  }

   /**
   * Used only for HGV. Optional for HGV
   * maximum: 99999
   * @return frontAxleTo5thWheelCouplingMin
  **/
    public BigDecimal getFrontAxleTo5thWheelCouplingMin() {
    return frontAxleTo5thWheelCouplingMin;
  }

  public void setFrontAxleTo5thWheelCouplingMin(BigDecimal frontAxleTo5thWheelCouplingMin) {
    this.frontAxleTo5thWheelCouplingMin = frontAxleTo5thWheelCouplingMin;
  }

  public TechRecord frontAxleTo5thWheelCouplingMax(BigDecimal frontAxleTo5thWheelCouplingMax) {
    this.frontAxleTo5thWheelCouplingMax = frontAxleTo5thWheelCouplingMax;
    return this;
  }

   /**
   * Used only for HGV. Optional for HGV
   * maximum: 99999
   * @return frontAxleTo5thWheelCouplingMax
  **/
    public BigDecimal getFrontAxleTo5thWheelCouplingMax() {
    return frontAxleTo5thWheelCouplingMax;
  }

  public void setFrontAxleTo5thWheelCouplingMax(BigDecimal frontAxleTo5thWheelCouplingMax) {
    this.frontAxleTo5thWheelCouplingMax = frontAxleTo5thWheelCouplingMax;
  }

  public TechRecord frontAxleToRearAxle(BigDecimal frontAxleToRearAxle) {
    this.frontAxleToRearAxle = frontAxleToRearAxle;
    return this;
  }

   /**
   * Used for all vehicle types. Optional for PSV
   * maximum: 99999
   * @return frontAxleToRearAxle
  **/
    public BigDecimal getFrontAxleToRearAxle() {
    return frontAxleToRearAxle;
  }

  public void setFrontAxleToRearAxle(BigDecimal frontAxleToRearAxle) {
    this.frontAxleToRearAxle = frontAxleToRearAxle;
  }

  public TechRecord rearAxleToRearTrl(BigDecimal rearAxleToRearTrl) {
    this.rearAxleToRearTrl = rearAxleToRearTrl;
    return this;
  }

   /**
   * Used only for TRL
   * maximum: 99999
   * @return rearAxleToRearTrl
  **/
    public BigDecimal getRearAxleToRearTrl() {
    return rearAxleToRearTrl;
  }

  public void setRearAxleToRearTrl(BigDecimal rearAxleToRearTrl) {
    this.rearAxleToRearTrl = rearAxleToRearTrl;
  }

  public TechRecord couplingCenterToRearAxleMin(BigDecimal couplingCenterToRearAxleMin) {
    this.couplingCenterToRearAxleMin = couplingCenterToRearAxleMin;
    return this;
  }

   /**
   * Used only for TRL
   * maximum: 99999
   * @return couplingCenterToRearAxleMin
  **/
    public BigDecimal getCouplingCenterToRearAxleMin() {
    return couplingCenterToRearAxleMin;
  }

  public void setCouplingCenterToRearAxleMin(BigDecimal couplingCenterToRearAxleMin) {
    this.couplingCenterToRearAxleMin = couplingCenterToRearAxleMin;
  }

  public TechRecord couplingCenterToRearAxleMax(BigDecimal couplingCenterToRearAxleMax) {
    this.couplingCenterToRearAxleMax = couplingCenterToRearAxleMax;
    return this;
  }

   /**
   * Used only for TRL
   * maximum: 99999
   * @return couplingCenterToRearAxleMax
  **/
    public BigDecimal getCouplingCenterToRearAxleMax() {
    return couplingCenterToRearAxleMax;
  }

  public void setCouplingCenterToRearAxleMax(BigDecimal couplingCenterToRearAxleMax) {
    this.couplingCenterToRearAxleMax = couplingCenterToRearAxleMax;
  }

  public TechRecord couplingCenterToRearTrlMin(BigDecimal couplingCenterToRearTrlMin) {
    this.couplingCenterToRearTrlMin = couplingCenterToRearTrlMin;
    return this;
  }

   /**
   * Used only for TRL
   * maximum: 99999
   * @return couplingCenterToRearTrlMin
  **/
    public BigDecimal getCouplingCenterToRearTrlMin() {
    return couplingCenterToRearTrlMin;
  }

  public void setCouplingCenterToRearTrlMin(BigDecimal couplingCenterToRearTrlMin) {
    this.couplingCenterToRearTrlMin = couplingCenterToRearTrlMin;
  }

  public TechRecord couplingCenterToRearTrlMax(BigDecimal couplingCenterToRearTrlMax) {
    this.couplingCenterToRearTrlMax = couplingCenterToRearTrlMax;
    return this;
  }

   /**
   * Used only for TRL
   * maximum: 99999
   * @return couplingCenterToRearTrlMax
  **/
    public BigDecimal getCouplingCenterToRearTrlMax() {
    return couplingCenterToRearTrlMax;
  }

  public void setCouplingCenterToRearTrlMax(BigDecimal couplingCenterToRearTrlMax) {
    this.couplingCenterToRearTrlMax = couplingCenterToRearTrlMax;
  }

  public TechRecord centreOfRearmostAxleToRearOfTrl(BigDecimal centreOfRearmostAxleToRearOfTrl) {
    this.centreOfRearmostAxleToRearOfTrl = centreOfRearmostAxleToRearOfTrl;
    return this;
  }

   /**
   * Used only for TRL
   * maximum: 99999
   * @return centreOfRearmostAxleToRearOfTrl
  **/
    public BigDecimal getCentreOfRearmostAxleToRearOfTrl() {
    return centreOfRearmostAxleToRearOfTrl;
  }

  public void setCentreOfRearmostAxleToRearOfTrl(BigDecimal centreOfRearmostAxleToRearOfTrl) {
    this.centreOfRearmostAxleToRearOfTrl = centreOfRearmostAxleToRearOfTrl;
  }

  public TechRecord notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Used only for HGV and TRL
   * @return notes
  **/
    public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public TechRecord noOfAxles(BigDecimal noOfAxles) {
    this.noOfAxles = noOfAxles;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV, TRL, car, lgv, motorcycle
   * maximum: 99
   * @return noOfAxles
  **/
    public BigDecimal getNoOfAxles() {
    return noOfAxles;
  }

  public void setNoOfAxles(BigDecimal noOfAxles) {
    this.noOfAxles = noOfAxles;
  }

  public TechRecord brakeCode(String brakeCode) {
    this.brakeCode = brakeCode;
    return this;
  }

   /**
   * Used only for PSV
   * @return brakeCode
  **/
    public String getBrakeCode() {
    return brakeCode;
  }

  public void setBrakeCode(String brakeCode) {
    this.brakeCode = brakeCode;
  }

  public TechRecord adrDetails(AdrDetails adrDetails) {
    this.adrDetails = adrDetails;
    return this;
  }

   /**
   * Get adrDetails
   * @return adrDetails
  **/
    public AdrDetails getAdrDetails() {
    return adrDetails;
  }

  public void setAdrDetails(AdrDetails adrDetails) {
    this.adrDetails = adrDetails;
  }

  public TechRecord createdByName(String createdByName) {
    this.createdByName = createdByName;
    return this;
  }

   /**
   * This field gets populated with the Microsoft AD &#x27;name&#x27;, when a tech record gets created
   * @return createdByName
  **/
    public String getCreatedByName() {
    return createdByName;
  }

  public void setCreatedByName(String createdByName) {
    this.createdByName = createdByName;
  }

  public TechRecord createdById(String createdById) {
    this.createdById = createdById;
    return this;
  }

   /**
   * This attribute gets populated with the Microsoft AD &#x27;oid&#x27;, when a tech record gets created
   * @return createdById
  **/
    public String getCreatedById() {
    return createdById;
  }

  public void setCreatedById(String createdById) {
    this.createdById = createdById;
  }

  public TechRecord lastUpdatedByName(String lastUpdatedByName) {
    this.lastUpdatedByName = lastUpdatedByName;
    return this;
  }

   /**
   * This field gets populated with the Microsoft AD &#x27;name&#x27;, when a tech record gets updated
   * @return lastUpdatedByName
  **/
    public String getLastUpdatedByName() {
    return lastUpdatedByName;
  }

  public void setLastUpdatedByName(String lastUpdatedByName) {
    this.lastUpdatedByName = lastUpdatedByName;
  }

  public TechRecord lastUpdatedById(String lastUpdatedById) {
    this.lastUpdatedById = lastUpdatedById;
    return this;
  }

   /**
   * This attribute gets populated with the Microsoft AD &#x27;oid&#x27;, when a tech record gets updated
   * @return lastUpdatedById
  **/
    public String getLastUpdatedById() {
    return lastUpdatedById;
  }

  public void setLastUpdatedById(String lastUpdatedById) {
    this.lastUpdatedById = lastUpdatedById;
  }

  public TechRecord updateType(UpdateTypeEnum updateType) {
    this.updateType = updateType;
    return this;
  }

   /**
   * set updateType to adrUpdate on the archived tech record, when a tech record is archived
   * @return updateType
  **/
    public UpdateTypeEnum getUpdateType() {
    return updateType;
  }

  public void setUpdateType(UpdateTypeEnum updateType) {
    this.updateType = updateType;
  }

  public TechRecord vehicleClass(TechRecordVehicleClass vehicleClass) {
    this.vehicleClass = vehicleClass;
    return this;
  }

   /**
   * Get vehicleClass
   * @return vehicleClass
  **/
    public TechRecordVehicleClass getVehicleClass() {
    return vehicleClass;
  }

  public void setVehicleClass(TechRecordVehicleClass vehicleClass) {
    this.vehicleClass = vehicleClass;
  }

  public TechRecord vehicleSubclass(List<String> vehicleSubclass) {
    this.vehicleSubclass = vehicleSubclass;
    return this;
  }

  public TechRecord addVehicleSubclassItem(String vehicleSubclassItem) {
    if (this.vehicleSubclass == null) {
      this.vehicleSubclass = new ArrayList<String>();
    }
    this.vehicleSubclass.add(vehicleSubclassItem);
    return this;
  }

   /**
   * Used for car and lgv.
   * @return vehicleSubclass
  **/
    public List<String> getVehicleSubclass() {
    return vehicleSubclass;
  }

  public void setVehicleSubclass(List<String> vehicleSubclass) {
    this.vehicleSubclass = vehicleSubclass;
  }

  public TechRecord vehicleType(VehicleTypeEnum vehicleType) {
    this.vehicleType = vehicleType;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV, TRL, car, lgv, motorcycle
   * @return vehicleType
  **/
    public VehicleTypeEnum getVehicleType() {
    return vehicleType;
  }

  public void setVehicleType(VehicleTypeEnum vehicleType) {
    this.vehicleType = vehicleType;
  }

  public TechRecord vehicleSize(VehicleSizeEnum vehicleSize) {
    this.vehicleSize = vehicleSize;
    return this;
  }

   /**
   * Used only for PSV
   * @return vehicleSize
  **/
    public VehicleSizeEnum getVehicleSize() {
    return vehicleSize;
  }

  public void setVehicleSize(VehicleSizeEnum vehicleSize) {
    this.vehicleSize = vehicleSize;
  }

  public TechRecord numberOfSeatbelts(String numberOfSeatbelts) {
    this.numberOfSeatbelts = numberOfSeatbelts;
    return this;
  }

   /**
   * Used only for PSV
   * @return numberOfSeatbelts
  **/
    public String getNumberOfSeatbelts() {
    return numberOfSeatbelts;
  }

  public void setNumberOfSeatbelts(String numberOfSeatbelts) {
    this.numberOfSeatbelts = numberOfSeatbelts;
  }

  public TechRecord seatbeltInstallationApprovalDate(String seatbeltInstallationApprovalDate) {
    this.seatbeltInstallationApprovalDate = seatbeltInstallationApprovalDate;
    return this;
  }

   /**
   * Used only for PSV
   * @return seatbeltInstallationApprovalDate
  **/
    public String getSeatbeltInstallationApprovalDate() {
    return seatbeltInstallationApprovalDate;
  }

  public void setSeatbeltInstallationApprovalDate(String seatbeltInstallationApprovalDate) {
    this.seatbeltInstallationApprovalDate = seatbeltInstallationApprovalDate;
  }

  public TechRecord vehicleConfiguration(VehicleConfigurationEnum vehicleConfiguration) {
    this.vehicleConfiguration = vehicleConfiguration;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV and TRL
   * @return vehicleConfiguration
  **/
    public VehicleConfigurationEnum getVehicleConfiguration() {
    return vehicleConfiguration;
  }

  public void setVehicleConfiguration(VehicleConfigurationEnum vehicleConfiguration) {
    this.vehicleConfiguration = vehicleConfiguration;
  }

  public TechRecord brakes(Brakes brakes) {
    this.brakes = brakes;
    return this;
  }

   /**
   * Get brakes
   * @return brakes
  **/
    public Brakes getBrakes() {
    return brakes;
  }

  public void setBrakes(Brakes brakes) {
    this.brakes = brakes;
  }

  public TechRecord axles(Axles axles) {
    this.axles = axles;
    return this;
  }

   /**
   * Get axles
   * @return axles
  **/
    public Axles getAxles() {
    return axles;
  }

  public void setAxles(Axles axles) {
    this.axles = axles;
  }

  public TechRecord dda(Dda dda) {
    this.dda = dda;
    return this;
  }

   /**
   * Get dda
   * @return dda
  **/
    public Dda getDda() {
    return dda;
  }

  public void setDda(Dda dda) {
    this.dda = dda;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TechRecord techRecord = (TechRecord) o;
    return Objects.equals(this.recordCompleteness, techRecord.recordCompleteness) &&
        Objects.equals(this.createdAt, techRecord.createdAt) &&
        Objects.equals(this.lastUpdatedAt, techRecord.lastUpdatedAt) &&
        Objects.equals(this.make, techRecord.make) &&
        Objects.equals(this.model, techRecord.model) &&
        Objects.equals(this.functionCode, techRecord.functionCode) &&
        Objects.equals(this.fuelPropulsionSystem, techRecord.fuelPropulsionSystem) &&
        Objects.equals(this.offRoad, techRecord.offRoad) &&
        Objects.equals(this.numberOfWheelsDriven, techRecord.numberOfWheelsDriven) &&
        Objects.equals(this.euVehicleCategory, techRecord.euVehicleCategory) &&
        Objects.equals(this.emissionsLimit, techRecord.emissionsLimit) &&
        Objects.equals(this.departmentalVehicleMarker, techRecord.departmentalVehicleMarker) &&
        Objects.equals(this.authIntoService, techRecord.authIntoService) &&
        Objects.equals(this.lettersOfAuth, techRecord.lettersOfAuth) &&
        Objects.equals(this.alterationMarker, techRecord.alterationMarker) &&
        Objects.equals(this.approvalType, techRecord.approvalType) &&
        Objects.equals(this.approvalTypeNumber, techRecord.approvalTypeNumber) &&
        Objects.equals(this.variantNumber, techRecord.variantNumber) &&
        Objects.equals(this.variantVersionNumber, techRecord.variantVersionNumber) &&
        Objects.equals(this.grossEecWeight, techRecord.grossEecWeight) &&
        Objects.equals(this.trainEecWeight, techRecord.trainEecWeight) &&
        Objects.equals(this.maxTrainEecWeight, techRecord.maxTrainEecWeight) &&
        Objects.equals(this.applicantDetails, techRecord.applicantDetails) &&
        Objects.equals(this.purchaserDetails, techRecord.purchaserDetails) &&
        Objects.equals(this.manufacturerDetails, techRecord.manufacturerDetails) &&
        Objects.equals(this.microfilm, techRecord.microfilm) &&
        Objects.equals(this.plates, techRecord.plates) &&
        Objects.equals(this.chassisMake, techRecord.chassisMake) &&
        Objects.equals(this.chassisModel, techRecord.chassisModel) &&
        Objects.equals(this.bodyMake, techRecord.bodyMake) &&
        Objects.equals(this.bodyModel, techRecord.bodyModel) &&
        Objects.equals(this.modelLiteral, techRecord.modelLiteral) &&
        Objects.equals(this.bodyType, techRecord.bodyType) &&
        Objects.equals(this.manufactureYear, techRecord.manufactureYear) &&
        Objects.equals(this.regnDate, techRecord.regnDate) &&
        Objects.equals(this.firstUseDate, techRecord.firstUseDate) &&
        Objects.equals(this.coifDate, techRecord.coifDate) &&
        Objects.equals(this.ntaNumber, techRecord.ntaNumber) &&
        Objects.equals(this.coifSerialNumber, techRecord.coifSerialNumber) &&
        Objects.equals(this.coifCertifierName, techRecord.coifCertifierName) &&
        Objects.equals(this.conversionRefNo, techRecord.conversionRefNo) &&
        Objects.equals(this.seatsLowerDeck, techRecord.seatsLowerDeck) &&
        Objects.equals(this.seatsUpperDeck, techRecord.seatsUpperDeck) &&
        Objects.equals(this.standingCapacity, techRecord.standingCapacity) &&
        Objects.equals(this.speedRestriction, techRecord.speedRestriction) &&
        Objects.equals(this.speedLimiterMrk, techRecord.speedLimiterMrk) &&
        Objects.equals(this.tachoExemptMrk, techRecord.tachoExemptMrk) &&
        Objects.equals(this.dispensations, techRecord.dispensations) &&
        Objects.equals(this.remarks, techRecord.remarks) &&
        Objects.equals(this.reasonForCreation, techRecord.reasonForCreation) &&
        Objects.equals(this.statusCode, techRecord.statusCode) &&
        Objects.equals(this.unladenWeight, techRecord.unladenWeight) &&
        Objects.equals(this.grossKerbWeight, techRecord.grossKerbWeight) &&
        Objects.equals(this.grossLadenWeight, techRecord.grossLadenWeight) &&
        Objects.equals(this.grossGbWeight, techRecord.grossGbWeight) &&
        Objects.equals(this.grossDesignWeight, techRecord.grossDesignWeight) &&
        Objects.equals(this.trainGbWeight, techRecord.trainGbWeight) &&
        Objects.equals(this.trainDesignWeight, techRecord.trainDesignWeight) &&
        Objects.equals(this.maxTrainGbWeight, techRecord.maxTrainGbWeight) &&
        Objects.equals(this.maxTrainDesignWeight, techRecord.maxTrainDesignWeight) &&
        Objects.equals(this.maxLoadOnCoupling, techRecord.maxLoadOnCoupling) &&
        Objects.equals(this.frameDescription, techRecord.frameDescription) &&
        Objects.equals(this.tyreUseCode, techRecord.tyreUseCode) &&
        Objects.equals(this.roadFriendly, techRecord.roadFriendly) &&
        Objects.equals(this.drawbarCouplingFitted, techRecord.drawbarCouplingFitted) &&
        Objects.equals(this.euroStandard, techRecord.euroStandard) &&
        Objects.equals(this.suspensionType, techRecord.suspensionType) &&
        Objects.equals(this.couplingType, techRecord.couplingType) &&
        Objects.equals(this.dimensions, techRecord.dimensions) &&
        Objects.equals(this.frontAxleTo5thWheelMin, techRecord.frontAxleTo5thWheelMin) &&
        Objects.equals(this.frontAxleTo5thWheelMax, techRecord.frontAxleTo5thWheelMax) &&
        Objects.equals(this.frontAxleTo5thWheelCouplingMin, techRecord.frontAxleTo5thWheelCouplingMin) &&
        Objects.equals(this.frontAxleTo5thWheelCouplingMax, techRecord.frontAxleTo5thWheelCouplingMax) &&
        Objects.equals(this.frontAxleToRearAxle, techRecord.frontAxleToRearAxle) &&
        Objects.equals(this.rearAxleToRearTrl, techRecord.rearAxleToRearTrl) &&
        Objects.equals(this.couplingCenterToRearAxleMin, techRecord.couplingCenterToRearAxleMin) &&
        Objects.equals(this.couplingCenterToRearAxleMax, techRecord.couplingCenterToRearAxleMax) &&
        Objects.equals(this.couplingCenterToRearTrlMin, techRecord.couplingCenterToRearTrlMin) &&
        Objects.equals(this.couplingCenterToRearTrlMax, techRecord.couplingCenterToRearTrlMax) &&
        Objects.equals(this.centreOfRearmostAxleToRearOfTrl, techRecord.centreOfRearmostAxleToRearOfTrl) &&
        Objects.equals(this.notes, techRecord.notes) &&
        Objects.equals(this.noOfAxles, techRecord.noOfAxles) &&
        Objects.equals(this.brakeCode, techRecord.brakeCode) &&
        Objects.equals(this.adrDetails, techRecord.adrDetails) &&
        Objects.equals(this.createdByName, techRecord.createdByName) &&
        Objects.equals(this.createdById, techRecord.createdById) &&
        Objects.equals(this.lastUpdatedByName, techRecord.lastUpdatedByName) &&
        Objects.equals(this.lastUpdatedById, techRecord.lastUpdatedById) &&
        Objects.equals(this.updateType, techRecord.updateType) &&
        Objects.equals(this.vehicleClass, techRecord.vehicleClass) &&
        Objects.equals(this.vehicleSubclass, techRecord.vehicleSubclass) &&
        Objects.equals(this.vehicleType, techRecord.vehicleType) &&
        Objects.equals(this.vehicleSize, techRecord.vehicleSize) &&
        Objects.equals(this.numberOfSeatbelts, techRecord.numberOfSeatbelts) &&
        Objects.equals(this.seatbeltInstallationApprovalDate, techRecord.seatbeltInstallationApprovalDate) &&
        Objects.equals(this.vehicleConfiguration, techRecord.vehicleConfiguration) &&
        Objects.equals(this.brakes, techRecord.brakes) &&
        Objects.equals(this.axles, techRecord.axles) &&
        Objects.equals(this.dda, techRecord.dda);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recordCompleteness, createdAt, lastUpdatedAt, make, model, functionCode, fuelPropulsionSystem, offRoad, numberOfWheelsDriven, euVehicleCategory, emissionsLimit, departmentalVehicleMarker, authIntoService, lettersOfAuth, alterationMarker, approvalType, approvalTypeNumber, variantNumber, variantVersionNumber, grossEecWeight, trainEecWeight, maxTrainEecWeight, applicantDetails, purchaserDetails, manufacturerDetails, microfilm, plates, chassisMake, chassisModel, bodyMake, bodyModel, modelLiteral, bodyType, manufactureYear, regnDate, firstUseDate, coifDate, ntaNumber, coifSerialNumber, coifCertifierName, conversionRefNo, seatsLowerDeck, seatsUpperDeck, standingCapacity, speedRestriction, speedLimiterMrk, tachoExemptMrk, dispensations, remarks, reasonForCreation, statusCode, unladenWeight, grossKerbWeight, grossLadenWeight, grossGbWeight, grossDesignWeight, trainGbWeight, trainDesignWeight, maxTrainGbWeight, maxTrainDesignWeight, maxLoadOnCoupling, frameDescription, tyreUseCode, roadFriendly, drawbarCouplingFitted, euroStandard, suspensionType, couplingType, dimensions, frontAxleTo5thWheelMin, frontAxleTo5thWheelMax, frontAxleTo5thWheelCouplingMin, frontAxleTo5thWheelCouplingMax, frontAxleToRearAxle, rearAxleToRearTrl, couplingCenterToRearAxleMin, couplingCenterToRearAxleMax, couplingCenterToRearTrlMin, couplingCenterToRearTrlMax, centreOfRearmostAxleToRearOfTrl, notes, noOfAxles, brakeCode, adrDetails, createdByName, createdById, lastUpdatedByName, lastUpdatedById, updateType, vehicleClass, vehicleSubclass, vehicleType, vehicleSize, numberOfSeatbelts, seatbeltInstallationApprovalDate, vehicleConfiguration, brakes, axles, dda);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TechRecord {\n");
    
    sb.append("    recordCompleteness: ").append(toIndentedString(recordCompleteness)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    functionCode: ").append(toIndentedString(functionCode)).append("\n");
    sb.append("    fuelPropulsionSystem: ").append(toIndentedString(fuelPropulsionSystem)).append("\n");
    sb.append("    offRoad: ").append(toIndentedString(offRoad)).append("\n");
    sb.append("    numberOfWheelsDriven: ").append(toIndentedString(numberOfWheelsDriven)).append("\n");
    sb.append("    euVehicleCategory: ").append(toIndentedString(euVehicleCategory)).append("\n");
    sb.append("    emissionsLimit: ").append(toIndentedString(emissionsLimit)).append("\n");
    sb.append("    departmentalVehicleMarker: ").append(toIndentedString(departmentalVehicleMarker)).append("\n");
    sb.append("    authIntoService: ").append(toIndentedString(authIntoService)).append("\n");
    sb.append("    lettersOfAuth: ").append(toIndentedString(lettersOfAuth)).append("\n");
    sb.append("    alterationMarker: ").append(toIndentedString(alterationMarker)).append("\n");
    sb.append("    approvalType: ").append(toIndentedString(approvalType)).append("\n");
    sb.append("    approvalTypeNumber: ").append(toIndentedString(approvalTypeNumber)).append("\n");
    sb.append("    variantNumber: ").append(toIndentedString(variantNumber)).append("\n");
    sb.append("    variantVersionNumber: ").append(toIndentedString(variantVersionNumber)).append("\n");
    sb.append("    grossEecWeight: ").append(toIndentedString(grossEecWeight)).append("\n");
    sb.append("    trainEecWeight: ").append(toIndentedString(trainEecWeight)).append("\n");
    sb.append("    maxTrainEecWeight: ").append(toIndentedString(maxTrainEecWeight)).append("\n");
    sb.append("    applicantDetails: ").append(toIndentedString(applicantDetails)).append("\n");
    sb.append("    purchaserDetails: ").append(toIndentedString(purchaserDetails)).append("\n");
    sb.append("    manufacturerDetails: ").append(toIndentedString(manufacturerDetails)).append("\n");
    sb.append("    microfilm: ").append(toIndentedString(microfilm)).append("\n");
    sb.append("    plates: ").append(toIndentedString(plates)).append("\n");
    sb.append("    chassisMake: ").append(toIndentedString(chassisMake)).append("\n");
    sb.append("    chassisModel: ").append(toIndentedString(chassisModel)).append("\n");
    sb.append("    bodyMake: ").append(toIndentedString(bodyMake)).append("\n");
    sb.append("    bodyModel: ").append(toIndentedString(bodyModel)).append("\n");
    sb.append("    modelLiteral: ").append(toIndentedString(modelLiteral)).append("\n");
    sb.append("    bodyType: ").append(toIndentedString(bodyType)).append("\n");
    sb.append("    manufactureYear: ").append(toIndentedString(manufactureYear)).append("\n");
    sb.append("    regnDate: ").append(toIndentedString(regnDate)).append("\n");
    sb.append("    firstUseDate: ").append(toIndentedString(firstUseDate)).append("\n");
    sb.append("    coifDate: ").append(toIndentedString(coifDate)).append("\n");
    sb.append("    ntaNumber: ").append(toIndentedString(ntaNumber)).append("\n");
    sb.append("    coifSerialNumber: ").append(toIndentedString(coifSerialNumber)).append("\n");
    sb.append("    coifCertifierName: ").append(toIndentedString(coifCertifierName)).append("\n");
    sb.append("    conversionRefNo: ").append(toIndentedString(conversionRefNo)).append("\n");
    sb.append("    seatsLowerDeck: ").append(toIndentedString(seatsLowerDeck)).append("\n");
    sb.append("    seatsUpperDeck: ").append(toIndentedString(seatsUpperDeck)).append("\n");
    sb.append("    standingCapacity: ").append(toIndentedString(standingCapacity)).append("\n");
    sb.append("    speedRestriction: ").append(toIndentedString(speedRestriction)).append("\n");
    sb.append("    speedLimiterMrk: ").append(toIndentedString(speedLimiterMrk)).append("\n");
    sb.append("    tachoExemptMrk: ").append(toIndentedString(tachoExemptMrk)).append("\n");
    sb.append("    dispensations: ").append(toIndentedString(dispensations)).append("\n");
    sb.append("    remarks: ").append(toIndentedString(remarks)).append("\n");
    sb.append("    reasonForCreation: ").append(toIndentedString(reasonForCreation)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    unladenWeight: ").append(toIndentedString(unladenWeight)).append("\n");
    sb.append("    grossKerbWeight: ").append(toIndentedString(grossKerbWeight)).append("\n");
    sb.append("    grossLadenWeight: ").append(toIndentedString(grossLadenWeight)).append("\n");
    sb.append("    grossGbWeight: ").append(toIndentedString(grossGbWeight)).append("\n");
    sb.append("    grossDesignWeight: ").append(toIndentedString(grossDesignWeight)).append("\n");
    sb.append("    trainGbWeight: ").append(toIndentedString(trainGbWeight)).append("\n");
    sb.append("    trainDesignWeight: ").append(toIndentedString(trainDesignWeight)).append("\n");
    sb.append("    maxTrainGbWeight: ").append(toIndentedString(maxTrainGbWeight)).append("\n");
    sb.append("    maxTrainDesignWeight: ").append(toIndentedString(maxTrainDesignWeight)).append("\n");
    sb.append("    maxLoadOnCoupling: ").append(toIndentedString(maxLoadOnCoupling)).append("\n");
    sb.append("    frameDescription: ").append(toIndentedString(frameDescription)).append("\n");
    sb.append("    tyreUseCode: ").append(toIndentedString(tyreUseCode)).append("\n");
    sb.append("    roadFriendly: ").append(toIndentedString(roadFriendly)).append("\n");
    sb.append("    drawbarCouplingFitted: ").append(toIndentedString(drawbarCouplingFitted)).append("\n");
    sb.append("    euroStandard: ").append(toIndentedString(euroStandard)).append("\n");
    sb.append("    suspensionType: ").append(toIndentedString(suspensionType)).append("\n");
    sb.append("    couplingType: ").append(toIndentedString(couplingType)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    frontAxleTo5thWheelMin: ").append(toIndentedString(frontAxleTo5thWheelMin)).append("\n");
    sb.append("    frontAxleTo5thWheelMax: ").append(toIndentedString(frontAxleTo5thWheelMax)).append("\n");
    sb.append("    frontAxleTo5thWheelCouplingMin: ").append(toIndentedString(frontAxleTo5thWheelCouplingMin)).append("\n");
    sb.append("    frontAxleTo5thWheelCouplingMax: ").append(toIndentedString(frontAxleTo5thWheelCouplingMax)).append("\n");
    sb.append("    frontAxleToRearAxle: ").append(toIndentedString(frontAxleToRearAxle)).append("\n");
    sb.append("    rearAxleToRearTrl: ").append(toIndentedString(rearAxleToRearTrl)).append("\n");
    sb.append("    couplingCenterToRearAxleMin: ").append(toIndentedString(couplingCenterToRearAxleMin)).append("\n");
    sb.append("    couplingCenterToRearAxleMax: ").append(toIndentedString(couplingCenterToRearAxleMax)).append("\n");
    sb.append("    couplingCenterToRearTrlMin: ").append(toIndentedString(couplingCenterToRearTrlMin)).append("\n");
    sb.append("    couplingCenterToRearTrlMax: ").append(toIndentedString(couplingCenterToRearTrlMax)).append("\n");
    sb.append("    centreOfRearmostAxleToRearOfTrl: ").append(toIndentedString(centreOfRearmostAxleToRearOfTrl)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    noOfAxles: ").append(toIndentedString(noOfAxles)).append("\n");
    sb.append("    brakeCode: ").append(toIndentedString(brakeCode)).append("\n");
    sb.append("    adrDetails: ").append(toIndentedString(adrDetails)).append("\n");
    sb.append("    createdByName: ").append(toIndentedString(createdByName)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    lastUpdatedByName: ").append(toIndentedString(lastUpdatedByName)).append("\n");
    sb.append("    lastUpdatedById: ").append(toIndentedString(lastUpdatedById)).append("\n");
    sb.append("    updateType: ").append(toIndentedString(updateType)).append("\n");
    sb.append("    vehicleClass: ").append(toIndentedString(vehicleClass)).append("\n");
    sb.append("    vehicleSubclass: ").append(toIndentedString(vehicleSubclass)).append("\n");
    sb.append("    vehicleType: ").append(toIndentedString(vehicleType)).append("\n");
    sb.append("    vehicleSize: ").append(toIndentedString(vehicleSize)).append("\n");
    sb.append("    numberOfSeatbelts: ").append(toIndentedString(numberOfSeatbelts)).append("\n");
    sb.append("    seatbeltInstallationApprovalDate: ").append(toIndentedString(seatbeltInstallationApprovalDate)).append("\n");
    sb.append("    vehicleConfiguration: ").append(toIndentedString(vehicleConfiguration)).append("\n");
    sb.append("    brakes: ").append(toIndentedString(brakes)).append("\n");
    sb.append("    axles: ").append(toIndentedString(axles)).append("\n");
    sb.append("    dda: ").append(toIndentedString(dda)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

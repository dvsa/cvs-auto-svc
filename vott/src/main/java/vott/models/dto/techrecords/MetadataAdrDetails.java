/*
 * Vehicles Microservice
 * This is the API spec for the vehicle microservice. Endpoints and parameters only exist for the operations getVehicle and getTechRecords. Other operations within the microservice are out of scope.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bpecete@deloittece.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package vott.models.dto.techrecords;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * MetadataAdrDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-04-13T13:30:43.231Z[GMT]")
public class MetadataAdrDetails {
  /**
   * Gets or Sets memosApplyFe
   */
  @JsonAdapter(MemosApplyFeEnum.Adapter.class)
  public enum MemosApplyFeEnum {
    EXT("07/09 3mth leak ext");

    private String value;

    MemosApplyFeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MemosApplyFeEnum fromValue(String text) {
      for (MemosApplyFeEnum b : MemosApplyFeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MemosApplyFeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MemosApplyFeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MemosApplyFeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return MemosApplyFeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("memosApplyFe")
  private List<MemosApplyFeEnum> memosApplyFe = null;

  @SerializedName("tank")
  private MetadataAdrDetailsTank tank = null;

  @SerializedName("additionalNotes")
  private MetadataAdrDetailsAdditionalNotes additionalNotes = null;

  /**
   * Gets or Sets permittedDangerousGoodsFe
   */
  @JsonAdapter(PermittedDangerousGoodsFeEnum.Adapter.class)
  public enum PermittedDangerousGoodsFeEnum {
    FP_61_FL_("FP <61 (FL)"),
    AT("AT"),
    CLASS_5_1_HYDROGEN_PEROXIDE_OX_("Class 5.1 Hydrogen Peroxide (OX)"),
    MEMU("MEMU"),
    CARBON_DISULPHIDE("Carbon Disulphide"),
    HYDROGEN("Hydrogen"),
    EXPLOSIVES_TYPE_2_("Explosives (type 2)"),
    EXPLOSIVES_TYPE_3_("Explosives (type 3)");

    private String value;

    PermittedDangerousGoodsFeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PermittedDangerousGoodsFeEnum fromValue(String text) {
      for (PermittedDangerousGoodsFeEnum b : PermittedDangerousGoodsFeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PermittedDangerousGoodsFeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermittedDangerousGoodsFeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermittedDangerousGoodsFeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PermittedDangerousGoodsFeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("permittedDangerousGoodsFe")
  private List<PermittedDangerousGoodsFeEnum> permittedDangerousGoodsFe = null;

  @SerializedName("vehicleDetails")
  private MetadataAdrDetailsVehicleDetails vehicleDetails = null;

  public MetadataAdrDetails memosApplyFe(List<MemosApplyFeEnum> memosApplyFe) {
    this.memosApplyFe = memosApplyFe;
    return this;
  }

  public MetadataAdrDetails addMemosApplyFeItem(MemosApplyFeEnum memosApplyFeItem) {
    if (this.memosApplyFe == null) {
      this.memosApplyFe = new ArrayList<MemosApplyFeEnum>();
    }
    this.memosApplyFe.add(memosApplyFeItem);
    return this;
  }

   /**
   * Get memosApplyFe
   * @return memosApplyFe
  **/
    public List<MemosApplyFeEnum> getMemosApplyFe() {
    return memosApplyFe;
  }

  public void setMemosApplyFe(List<MemosApplyFeEnum> memosApplyFe) {
    this.memosApplyFe = memosApplyFe;
  }

  public MetadataAdrDetails tank(MetadataAdrDetailsTank tank) {
    this.tank = tank;
    return this;
  }

   /**
   * Get tank
   * @return tank
  **/
    public MetadataAdrDetailsTank getTank() {
    return tank;
  }

  public void setTank(MetadataAdrDetailsTank tank) {
    this.tank = tank;
  }

  public MetadataAdrDetails additionalNotes(MetadataAdrDetailsAdditionalNotes additionalNotes) {
    this.additionalNotes = additionalNotes;
    return this;
  }

   /**
   * Get additionalNotes
   * @return additionalNotes
  **/
    public MetadataAdrDetailsAdditionalNotes getAdditionalNotes() {
    return additionalNotes;
  }

  public void setAdditionalNotes(MetadataAdrDetailsAdditionalNotes additionalNotes) {
    this.additionalNotes = additionalNotes;
  }

  public MetadataAdrDetails permittedDangerousGoodsFe(List<PermittedDangerousGoodsFeEnum> permittedDangerousGoodsFe) {
    this.permittedDangerousGoodsFe = permittedDangerousGoodsFe;
    return this;
  }

  public MetadataAdrDetails addPermittedDangerousGoodsFeItem(PermittedDangerousGoodsFeEnum permittedDangerousGoodsFeItem) {
    if (this.permittedDangerousGoodsFe == null) {
      this.permittedDangerousGoodsFe = new ArrayList<PermittedDangerousGoodsFeEnum>();
    }
    this.permittedDangerousGoodsFe.add(permittedDangerousGoodsFeItem);
    return this;
  }

   /**
   * Get permittedDangerousGoodsFe
   * @return permittedDangerousGoodsFe
  **/
    public List<PermittedDangerousGoodsFeEnum> getPermittedDangerousGoodsFe() {
    return permittedDangerousGoodsFe;
  }

  public void setPermittedDangerousGoodsFe(List<PermittedDangerousGoodsFeEnum> permittedDangerousGoodsFe) {
    this.permittedDangerousGoodsFe = permittedDangerousGoodsFe;
  }

  public MetadataAdrDetails vehicleDetails(MetadataAdrDetailsVehicleDetails vehicleDetails) {
    this.vehicleDetails = vehicleDetails;
    return this;
  }

   /**
   * Get vehicleDetails
   * @return vehicleDetails
  **/
    public MetadataAdrDetailsVehicleDetails getVehicleDetails() {
    return vehicleDetails;
  }

  public void setVehicleDetails(MetadataAdrDetailsVehicleDetails vehicleDetails) {
    this.vehicleDetails = vehicleDetails;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataAdrDetails metadataAdrDetails = (MetadataAdrDetails) o;
    return Objects.equals(this.memosApplyFe, metadataAdrDetails.memosApplyFe) &&
        Objects.equals(this.tank, metadataAdrDetails.tank) &&
        Objects.equals(this.additionalNotes, metadataAdrDetails.additionalNotes) &&
        Objects.equals(this.permittedDangerousGoodsFe, metadataAdrDetails.permittedDangerousGoodsFe) &&
        Objects.equals(this.vehicleDetails, metadataAdrDetails.vehicleDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memosApplyFe, tank, additionalNotes, permittedDangerousGoodsFe, vehicleDetails);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataAdrDetails {\n");
    
    sb.append("    memosApplyFe: ").append(toIndentedString(memosApplyFe)).append("\n");
    sb.append("    tank: ").append(toIndentedString(tank)).append("\n");
    sb.append("    additionalNotes: ").append(toIndentedString(additionalNotes)).append("\n");
    sb.append("    permittedDangerousGoodsFe: ").append(toIndentedString(permittedDangerousGoodsFe)).append("\n");
    sb.append("    vehicleDetails: ").append(toIndentedString(vehicleDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

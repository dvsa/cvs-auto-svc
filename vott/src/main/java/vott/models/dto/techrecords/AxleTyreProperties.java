/*
 * Vehicles Microservice
 * This is the API spec for the vehicle microservice. Endpoints and parameters only exist for the operations getVehicle and getTechRecords. Other operations within the microservice are out of scope.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bpecete@deloittece.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package vott.models.dto.techrecords;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Objects;

/**
 * AxleTyreProperties
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-04-13T13:30:43.231Z[GMT]")
public class AxleTyreProperties {
  @SerializedName("tyreSize")
  private String tyreSize = null;

  @SerializedName("plyRating")
  private String plyRating = null;

  /**
   * Used for all vehicle types - PSV, HGV and TRL
   */
  @JsonAdapter(FitmentCodeEnum.Adapter.class)
  public enum FitmentCodeEnum {
    DOUBLE("double"),
    SINGLE("single");

    private String value;

    FitmentCodeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FitmentCodeEnum fromValue(String text) {
      for (FitmentCodeEnum b : FitmentCodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FitmentCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FitmentCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FitmentCodeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FitmentCodeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("fitmentCode")
  private FitmentCodeEnum fitmentCode = null;

  @SerializedName("dataTrAxles")
  private BigDecimal dataTrAxles = null;

  /**
   * Used only for PSV
   */
  @JsonAdapter(SpeedCategorySymbolEnum.Adapter.class)
  public enum SpeedCategorySymbolEnum {
    A7("a7"),
    A8("a8"),
    B("b"),
    C("c"),
    D("d"),
    E("e"),
    F("f"),
    G("g"),
    J("j"),
    K("k"),
    L("l"),
    M("m"),
    N("n"),
    P("p"),
    Q("q");

    private String value;

    SpeedCategorySymbolEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SpeedCategorySymbolEnum fromValue(String text) {
      for (SpeedCategorySymbolEnum b : SpeedCategorySymbolEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SpeedCategorySymbolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpeedCategorySymbolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpeedCategorySymbolEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SpeedCategorySymbolEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("speedCategorySymbol")
  private SpeedCategorySymbolEnum speedCategorySymbol = null;

  @SerializedName("tyreCode")
  private BigDecimal tyreCode = null;

  public AxleTyreProperties tyreSize(String tyreSize) {
    this.tyreSize = tyreSize;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV and TRL
   * @return tyreSize
  **/
    public String getTyreSize() {
    return tyreSize;
  }

  public void setTyreSize(String tyreSize) {
    this.tyreSize = tyreSize;
  }

  public AxleTyreProperties plyRating(String plyRating) {
    this.plyRating = plyRating;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV and TRL
   * @return plyRating
  **/
    public String getPlyRating() {
    return plyRating;
  }

  public void setPlyRating(String plyRating) {
    this.plyRating = plyRating;
  }

  public AxleTyreProperties fitmentCode(FitmentCodeEnum fitmentCode) {
    this.fitmentCode = fitmentCode;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV and TRL
   * @return fitmentCode
  **/
    public FitmentCodeEnum getFitmentCode() {
    return fitmentCode;
  }

  public void setFitmentCode(FitmentCodeEnum fitmentCode) {
    this.fitmentCode = fitmentCode;
  }

  public AxleTyreProperties dataTrAxles(BigDecimal dataTrAxles) {
    this.dataTrAxles = dataTrAxles;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV and TRL
   * maximum: 999
   * @return dataTrAxles
  **/
    public BigDecimal getDataTrAxles() {
    return dataTrAxles;
  }

  public void setDataTrAxles(BigDecimal dataTrAxles) {
    this.dataTrAxles = dataTrAxles;
  }

  public AxleTyreProperties speedCategorySymbol(SpeedCategorySymbolEnum speedCategorySymbol) {
    this.speedCategorySymbol = speedCategorySymbol;
    return this;
  }

   /**
   * Used only for PSV
   * @return speedCategorySymbol
  **/
    public SpeedCategorySymbolEnum getSpeedCategorySymbol() {
    return speedCategorySymbol;
  }

  public void setSpeedCategorySymbol(SpeedCategorySymbolEnum speedCategorySymbol) {
    this.speedCategorySymbol = speedCategorySymbol;
  }

  public AxleTyreProperties tyreCode(BigDecimal tyreCode) {
    this.tyreCode = tyreCode;
    return this;
  }

   /**
   * Used for all vehicle types - PSV, HGV and TRL
   * maximum: 9999
   * @return tyreCode
  **/
    public BigDecimal getTyreCode() {
    return tyreCode;
  }

  public void setTyreCode(BigDecimal tyreCode) {
    this.tyreCode = tyreCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AxleTyreProperties axleTyreProperties = (AxleTyreProperties) o;
    return Objects.equals(this.tyreSize, axleTyreProperties.tyreSize) &&
        Objects.equals(this.plyRating, axleTyreProperties.plyRating) &&
        Objects.equals(this.fitmentCode, axleTyreProperties.fitmentCode) &&
        Objects.equals(this.dataTrAxles, axleTyreProperties.dataTrAxles) &&
        Objects.equals(this.speedCategorySymbol, axleTyreProperties.speedCategorySymbol) &&
        Objects.equals(this.tyreCode, axleTyreProperties.tyreCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tyreSize, plyRating, fitmentCode, dataTrAxles, speedCategorySymbol, tyreCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AxleTyreProperties {\n");
    
    sb.append("    tyreSize: ").append(toIndentedString(tyreSize)).append("\n");
    sb.append("    plyRating: ").append(toIndentedString(plyRating)).append("\n");
    sb.append("    fitmentCode: ").append(toIndentedString(fitmentCode)).append("\n");
    sb.append("    dataTrAxles: ").append(toIndentedString(dataTrAxles)).append("\n");
    sb.append("    speedCategorySymbol: ").append(toIndentedString(speedCategorySymbol)).append("\n");
    sb.append("    tyreCode: ").append(toIndentedString(tyreCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

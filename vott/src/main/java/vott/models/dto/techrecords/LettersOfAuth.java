/*
 * Vehicles Microservice
 * This is the API spec for the vehicle microservice. Endpoints and parameters only exist for the operations getVehicle and getTechRecords. Other operations within the microservice are out of scope.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bpecete@deloittece.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package vott.models.dto.techrecords;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.time.LocalDate;

import java.io.IOException;
import java.util.Objects;

/**
 * Letters of authorisation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-04-13T13:30:43.231Z[GMT]")
public class LettersOfAuth {
  /**
   * Used only for TRL
   */
  @JsonAdapter(LetterTypeEnum.Adapter.class)
  public enum LetterTypeEnum {
    AUTHORIZATION("Trailer authorization"),
    REJECTION("Trailer rejection");

    private String value;

    LetterTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LetterTypeEnum fromValue(String text) {
      for (LetterTypeEnum b : LetterTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LetterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LetterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LetterTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LetterTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("letterType")
  private LetterTypeEnum letterType = null;

  @SerializedName("letterDateRequested")
  private LocalDate letterDateRequested = null;

  @SerializedName("letterContents")
  private String letterContents = null;

  public LettersOfAuth letterType(LetterTypeEnum letterType) {
    this.letterType = letterType;
    return this;
  }

   /**
   * Used only for TRL
   * @return letterType
  **/
    public LetterTypeEnum getLetterType() {
    return letterType;
  }

  public void setLetterType(LetterTypeEnum letterType) {
    this.letterType = letterType;
  }

  public LettersOfAuth letterDateRequested(LocalDate letterDateRequested) {
    this.letterDateRequested = letterDateRequested;
    return this;
  }

   /**
   * Used only for TRL
   * @return letterDateRequested
  **/
    public LocalDate getLetterDateRequested() {
    return letterDateRequested;
  }

  public void setLetterDateRequested(LocalDate letterDateRequested) {
    this.letterDateRequested = letterDateRequested;
  }

  public LettersOfAuth letterContents(String letterContents) {
    this.letterContents = letterContents;
    return this;
  }

   /**
   * Used only for TRL
   * @return letterContents
  **/
    public String getLetterContents() {
    return letterContents;
  }

  public void setLetterContents(String letterContents) {
    this.letterContents = letterContents;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LettersOfAuth lettersOfAuth = (LettersOfAuth) o;
    return Objects.equals(this.letterType, lettersOfAuth.letterType) &&
        Objects.equals(this.letterDateRequested, lettersOfAuth.letterDateRequested) &&
        Objects.equals(this.letterContents, lettersOfAuth.letterContents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(letterType, letterDateRequested, letterContents);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LettersOfAuth {\n");
    
    sb.append("    letterType: ").append(toIndentedString(letterType)).append("\n");
    sb.append("    letterDateRequested: ").append(toIndentedString(letterDateRequested)).append("\n");
    sb.append("    letterContents: ").append(toIndentedString(letterContents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Test Results Microservice
 * This is the API spec for capturing test results. These test result will be stored in the AWS DynamoDB database. Authorization details will be updated once we have confirmed the security scheme we are using.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: test@test.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package vott.models.dto.testresults;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Objects;

/**
 * DefectAdditionalInformationLocation
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-04-13T13:44:54.508Z[GMT]")
public class DefectAdditionalInformationLocation {
  /**
   * Gets or Sets vertical
   */
  @JsonAdapter(VerticalEnum.Adapter.class)
  public enum VerticalEnum {
    UPPER("upper"),
    LOWER("lower");

    private String value;

    VerticalEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static VerticalEnum fromValue(String text) {
      for (VerticalEnum b : VerticalEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<VerticalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerticalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerticalEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return VerticalEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("vertical")
  private VerticalEnum vertical = null;

  /**
   * Gets or Sets horizontal
   */
  @JsonAdapter(HorizontalEnum.Adapter.class)
  public enum HorizontalEnum {
    INNER("inner"),
    OUTER("outer");

    private String value;

    HorizontalEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static HorizontalEnum fromValue(String text) {
      for (HorizontalEnum b : HorizontalEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<HorizontalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HorizontalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HorizontalEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return HorizontalEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("horizontal")
  private HorizontalEnum horizontal = null;

  /**
   * Gets or Sets lateral
   */
  @JsonAdapter(LateralEnum.Adapter.class)
  public enum LateralEnum {
    NEARSIDE("nearside"),
    CENTRE("centre"),
    OFFSIDE("offside");

    private String value;

    LateralEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LateralEnum fromValue(String text) {
      for (LateralEnum b : LateralEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LateralEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LateralEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LateralEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LateralEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("lateral")
  private LateralEnum lateral = null;

  /**
   * Gets or Sets longitudinal
   */
  @JsonAdapter(LongitudinalEnum.Adapter.class)
  public enum LongitudinalEnum {
    FRONT("front"),
    REAR("rear");

    private String value;

    LongitudinalEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LongitudinalEnum fromValue(String text) {
      for (LongitudinalEnum b : LongitudinalEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LongitudinalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LongitudinalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LongitudinalEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LongitudinalEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("longitudinal")
  private LongitudinalEnum longitudinal = null;

  @SerializedName("rowNumber")
  private BigDecimal rowNumber = null;

  @SerializedName("seatNumber")
  private BigDecimal seatNumber = null;

  @SerializedName("axleNumber")
  private BigDecimal axleNumber = null;

  public DefectAdditionalInformationLocation vertical(VerticalEnum vertical) {
    this.vertical = vertical;
    return this;
  }

   /**
   * Get vertical
   * @return vertical
  **/
  
  public VerticalEnum getVertical() {
    return vertical;
  }

  public void setVertical(VerticalEnum vertical) {
    this.vertical = vertical;
  }

  public DefectAdditionalInformationLocation horizontal(HorizontalEnum horizontal) {
    this.horizontal = horizontal;
    return this;
  }

   /**
   * Get horizontal
   * @return horizontal
  **/
  
  public HorizontalEnum getHorizontal() {
    return horizontal;
  }

  public void setHorizontal(HorizontalEnum horizontal) {
    this.horizontal = horizontal;
  }

  public DefectAdditionalInformationLocation lateral(LateralEnum lateral) {
    this.lateral = lateral;
    return this;
  }

   /**
   * Get lateral
   * @return lateral
  **/
  
  public LateralEnum getLateral() {
    return lateral;
  }

  public void setLateral(LateralEnum lateral) {
    this.lateral = lateral;
  }

  public DefectAdditionalInformationLocation longitudinal(LongitudinalEnum longitudinal) {
    this.longitudinal = longitudinal;
    return this;
  }

   /**
   * Get longitudinal
   * @return longitudinal
  **/
  
  public LongitudinalEnum getLongitudinal() {
    return longitudinal;
  }

  public void setLongitudinal(LongitudinalEnum longitudinal) {
    this.longitudinal = longitudinal;
  }

  public DefectAdditionalInformationLocation rowNumber(BigDecimal rowNumber) {
    this.rowNumber = rowNumber;
    return this;
  }

   /**
   * Get rowNumber
   * maximum: 20
   * @return rowNumber
  **/
  
  public BigDecimal getRowNumber() {
    return rowNumber;
  }

  public void setRowNumber(BigDecimal rowNumber) {
    this.rowNumber = rowNumber;
  }

  public DefectAdditionalInformationLocation seatNumber(BigDecimal seatNumber) {
    this.seatNumber = seatNumber;
    return this;
  }

   /**
   * Get seatNumber
   * maximum: 6
   * @return seatNumber
  **/
  
  public BigDecimal getSeatNumber() {
    return seatNumber;
  }

  public void setSeatNumber(BigDecimal seatNumber) {
    this.seatNumber = seatNumber;
  }

  public DefectAdditionalInformationLocation axleNumber(BigDecimal axleNumber) {
    this.axleNumber = axleNumber;
    return this;
  }

   /**
   * Get axleNumber
   * maximum: 10
   * @return axleNumber
  **/
  
  public BigDecimal getAxleNumber() {
    return axleNumber;
  }

  public void setAxleNumber(BigDecimal axleNumber) {
    this.axleNumber = axleNumber;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DefectAdditionalInformationLocation defectAdditionalInformationLocation = (DefectAdditionalInformationLocation) o;
    return Objects.equals(this.vertical, defectAdditionalInformationLocation.vertical) &&
        Objects.equals(this.horizontal, defectAdditionalInformationLocation.horizontal) &&
        Objects.equals(this.lateral, defectAdditionalInformationLocation.lateral) &&
        Objects.equals(this.longitudinal, defectAdditionalInformationLocation.longitudinal) &&
        Objects.equals(this.rowNumber, defectAdditionalInformationLocation.rowNumber) &&
        Objects.equals(this.seatNumber, defectAdditionalInformationLocation.seatNumber) &&
        Objects.equals(this.axleNumber, defectAdditionalInformationLocation.axleNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vertical, horizontal, lateral, longitudinal, rowNumber, seatNumber, axleNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DefectAdditionalInformationLocation {\n");
    
    sb.append("    vertical: ").append(toIndentedString(vertical)).append("\n");
    sb.append("    horizontal: ").append(toIndentedString(horizontal)).append("\n");
    sb.append("    lateral: ").append(toIndentedString(lateral)).append("\n");
    sb.append("    longitudinal: ").append(toIndentedString(longitudinal)).append("\n");
    sb.append("    rowNumber: ").append(toIndentedString(rowNumber)).append("\n");
    sb.append("    seatNumber: ").append(toIndentedString(seatNumber)).append("\n");
    sb.append("    axleNumber: ").append(toIndentedString(axleNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

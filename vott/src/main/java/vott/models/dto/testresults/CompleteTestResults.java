/*
 * Test Results Microservice
 * This is the API spec for capturing test results. These test result will be stored in the AWS DynamoDB database. Authorization details will be updated once we have confirmed the security scheme we are using.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: test@test.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package vott.models.dto.testresults;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import vott.models.adapter.ExplicitNull;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * CompleteTestResults
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-04-13T13:44:54.508Z[GMT]")
public class CompleteTestResults {
  @SerializedName("systemNumber")
  private String systemNumber = null;

  @SerializedName("vrm")
  private String vrm = null;

  @SerializedName("trailerId")
  private String trailerId = null;

  @SerializedName("vin")
  private String vin = null;

  @SerializedName("vehicleId")
  private String vehicleId = null;

  @SerializedName("deletionFlag")
  private Boolean deletionFlag = null;

  @SerializedName("testHistory")
  private List<CompleteTestResults> testHistory = null;

  /**
   * Tests submitted from the mobile app won&#x27;t have this attribute. Tests updated/created by VTM will do.
   */
  @JsonAdapter(TestVersionEnum.Adapter.class)
  public enum TestVersionEnum {
    CURRENT("current"),
    ARCHIVED("archived");

    private String value;

    TestVersionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TestVersionEnum fromValue(String text) {
      for (TestVersionEnum b : TestVersionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TestVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TestVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TestVersionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TestVersionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("testVersion")
  private TestVersionEnum testVersion = null;

  @SerializedName("reasonForCreation")
  private String reasonForCreation = null;

  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("createdByName")
  private String createdByName = null;

  @SerializedName("createdById")
  private String createdById = null;

  @SerializedName("lastUpdatedAt")
  private OffsetDateTime lastUpdatedAt = null;

  @SerializedName("lastUpdatedByName")
  private String lastUpdatedByName = null;

  @SerializedName("lastUpdatedById")
  private String lastUpdatedById = null;

  @SerializedName("shouldEmailCertificate")
  private String shouldEmailCertificate = null;

  @SerializedName("testStationName")
  private String testStationName = null;

  @SerializedName("testStationPNumber")
  private String testStationPNumber = null;

  /**
   * Gets or Sets testStationType
   */
  @JsonAdapter(TestStationTypeEnum.Adapter.class)
  public enum TestStationTypeEnum {
    ATF("atf"),
    GVTS("gvts"),
    HQ("hq");

    private String value;

    TestStationTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TestStationTypeEnum fromValue(String text) {
      for (TestStationTypeEnum b : TestStationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TestStationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TestStationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TestStationTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TestStationTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("testStationType")
  private TestStationTypeEnum testStationType = null;

  @SerializedName("testerName")
  private String testerName = null;

  @SerializedName("testerStaffId")
  private String testerStaffId = null;

  @SerializedName("testResultId")
  private String testResultId = null;

  @SerializedName("testerEmailAddress")
  private String testerEmailAddress = null;

  @SerializedName("testStartTimestamp")
  private OffsetDateTime testStartTimestamp = null;

  @SerializedName("testEndTimestamp")
  private OffsetDateTime testEndTimestamp = null;

  /**
   * Gets or Sets testStatus
   */
  @JsonAdapter(TestStatusEnum.Adapter.class)
  public enum TestStatusEnum {
    SUBMITTED("submitted"),
    CANCELLED("cancelled");

    private String value;

    TestStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TestStatusEnum fromValue(String text) {
      for (TestStatusEnum b : TestStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TestStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TestStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TestStatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TestStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("testStatus")
  private TestStatusEnum testStatus = null;

  @ExplicitNull
  @SerializedName("reasonForCancellation")
  private String reasonForCancellation = null;

  @SerializedName("vehicleClass")
  private CompleteTestResultsVehicleClass vehicleClass = null;

  @SerializedName("vehicleSubclass")
  private List<String> vehicleSubclass = null;

  /**
   * Gets or Sets vehicleType
   */
  @JsonAdapter(VehicleTypeEnum.Adapter.class)
  public enum VehicleTypeEnum {
    PSV("psv"),
    HGV("hgv"),
    TRL("trl"),
    CAR("car"),
    LGV("lgv"),
    MOTORCYCLE("motorcycle");

    private String value;

    VehicleTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static VehicleTypeEnum fromValue(String text) {
      for (VehicleTypeEnum b : VehicleTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<VehicleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VehicleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VehicleTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return VehicleTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("vehicleType")
  private VehicleTypeEnum vehicleType = null;

  @SerializedName("numberOfSeats")
  private BigDecimal numberOfSeats = null;

  /**
   * Gets or Sets vehicleConfiguration
   */
  @JsonAdapter(VehicleConfigurationEnum.Adapter.class)
  public enum VehicleConfigurationEnum {
    RIGID("rigid"),
    ARTICULATED("articulated"),
    CENTRE_AXLE_DRAWBAR("centre axle drawbar"),
    SEMI_CAR_TRANSPORTER("semi-car transporter"),
    SEMI_TRAILER("semi-trailer"),
    LOW_LOADER("low loader"),
    OTHER("other"),
    DRAWBAR("drawbar"),
    FOUR_IN_LINE("four-in-line"),
    DOLLY("dolly"),
    FULL_DRAWBAR("full drawbar");

    private String value;

    VehicleConfigurationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static VehicleConfigurationEnum fromValue(String text) {
      for (VehicleConfigurationEnum b : VehicleConfigurationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<VehicleConfigurationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VehicleConfigurationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VehicleConfigurationEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return VehicleConfigurationEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("vehicleConfiguration")
  private VehicleConfigurationEnum vehicleConfiguration = null;

  @SerializedName("odometerReading")
  private BigDecimal odometerReading = null;

  /**
   * Nullable only for Cancelled tests &amp; not applicable to TRL
   */
  @JsonAdapter(OdometerReadingUnitsEnum.Adapter.class)
  public enum OdometerReadingUnitsEnum {
    KILOMETRES("kilometres"),
    MILES("miles");

    private String value;

    OdometerReadingUnitsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OdometerReadingUnitsEnum fromValue(String text) {
      for (OdometerReadingUnitsEnum b : OdometerReadingUnitsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OdometerReadingUnitsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OdometerReadingUnitsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OdometerReadingUnitsEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OdometerReadingUnitsEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("odometerReadingUnits")
  private OdometerReadingUnitsEnum odometerReadingUnits = null;

  @SerializedName("preparerId")
  private String preparerId = null;

  @SerializedName("preparerName")
  private String preparerName = null;

  @SerializedName("numberOfWheelsDriven")
  private BigDecimal numberOfWheelsDriven = null;

  /**
   * Nullable only for Cancelled tests.
   */
  @JsonAdapter(EuVehicleCategoryEnum.Adapter.class)
  public enum EuVehicleCategoryEnum {
    M1("m1"),
    M2("m2"),
    M3("m3"),
    N1("n1"),
    N2("n2"),
    N3("n3"),
    O1("o1"),
    O2("o2"),
    O3("o3"),
    O4("o4"),
    L1E_A("l1e-a"),
    L1E("l1e"),
    L2E("l2e"),
    L3E("l3e"),
    L4E("l4e"),
    L5E("l5e"),
    L6E("l6e"),
    L7E("l7e");

    private String value;

    EuVehicleCategoryEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EuVehicleCategoryEnum fromValue(String text) {
      for (EuVehicleCategoryEnum b : EuVehicleCategoryEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EuVehicleCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EuVehicleCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EuVehicleCategoryEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return EuVehicleCategoryEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("euVehicleCategory")
  private EuVehicleCategoryEnum euVehicleCategory = null;

  @SerializedName("countryOfRegistration")
  private String countryOfRegistration = null;

  /**
   * Mandatory for PSV only &amp; not applicable to HGV and TRL
   */
  @JsonAdapter(VehicleSizeEnum.Adapter.class)
  public enum VehicleSizeEnum {
    LARGE("large"),
    SMALL("small");

    private String value;

    VehicleSizeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static VehicleSizeEnum fromValue(String text) {
      for (VehicleSizeEnum b : VehicleSizeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<VehicleSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VehicleSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VehicleSizeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return VehicleSizeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("vehicleSize")
  private VehicleSizeEnum vehicleSize = null;

  @SerializedName("noOfAxles")
  private BigDecimal noOfAxles = null;

  @SerializedName("regnDate")
  private LocalDate regnDate = null;

  @SerializedName("firstUseDate")
  private LocalDate firstUseDate = null;

  @SerializedName("testTypes")
  private TestTypes testTypes = null;

  public CompleteTestResults systemNumber(String systemNumber) {
    this.systemNumber = systemNumber;
    return this;
  }

   /**
   * It defines the link between a test and the vehicle, by uniqeuly identifing the vehicle.
   * @return systemNumber
  **/
  
  public String getSystemNumber() {
    return systemNumber;
  }

  public void setSystemNumber(String systemNumber) {
    this.systemNumber = systemNumber;
  }

  public CompleteTestResults vrm(String vrm) {
    this.vrm = vrm;
    return this;
  }

   /**
   * Mandatory for PSV and HGV, not applicable to TRL
   * @return vrm
  **/
  
  public String getVrm() {
    return vrm;
  }

  public void setVrm(String vrm) {
    this.vrm = vrm;
  }

  public CompleteTestResults trailerId(String trailerId) {
    this.trailerId = trailerId;
    return this;
  }

   /**
   * Mandatory for TRL, not applicable to PSV and HGV
   * @return trailerId
  **/
  
  public String getTrailerId() {
    return trailerId;
  }

  public void setTrailerId(String trailerId) {
    this.trailerId = trailerId;
  }

  public CompleteTestResults vin(String vin) {
    this.vin = vin;
    return this;
  }

   /**
   * Get vin
   * @return vin
  **/
  
  public String getVin() {
    return vin;
  }

  public void setVin(String vin) {
    this.vin = vin;
  }

  public CompleteTestResults vehicleId(String vehicleId) {
    this.vehicleId = vehicleId;
    return this;
  }

   /**
   * Not sent from FE, calculated in the BE. When the test result is submitted, in BE, the VRM of the vehicle will be copied into vehicleId also.
   * @return vehicleId
  **/
  
  public String getVehicleId() {
    return vehicleId;
  }

  public void setVehicleId(String vehicleId) {
    this.vehicleId = vehicleId;
  }

  public CompleteTestResults deletionFlag(Boolean deletionFlag) {
    this.deletionFlag = deletionFlag;
    return this;
  }

   /**
   * Not sent from FE, calculated in the BE.
   * @return deletionFlag
  **/
  
  public Boolean isDeletionFlag() {
    return deletionFlag;
  }

  public void setDeletionFlag(Boolean deletionFlag) {
    this.deletionFlag = deletionFlag;
  }

  public CompleteTestResults testHistory(List<CompleteTestResults> testHistory) {
    this.testHistory = testHistory;
    return this;
  }

  public CompleteTestResults addTestHistoryItem(CompleteTestResults testHistoryItem) {
    if (this.testHistory == null) {
      this.testHistory = new ArrayList<CompleteTestResults>();
    }
    this.testHistory.add(testHistoryItem);
    return this;
  }

   /**
   * Array of archived test-results. The test-results in this array won&#x27;t have the testHistory attribute and testVersion will always be archived. Should not be sent when performing an update
   * @return testHistory
  **/
  
  public List<CompleteTestResults> getTestHistory() {
    return testHistory;
  }

  public void setTestHistory(List<CompleteTestResults> testHistory) {
    this.testHistory = testHistory;
  }

  public CompleteTestResults testVersion(TestVersionEnum testVersion) {
    this.testVersion = testVersion;
    return this;
  }

   /**
   * Tests submitted from the mobile app won&#x27;t have this attribute. Tests updated/created by VTM will do.
   * @return testVersion
  **/
  
  public TestVersionEnum getTestVersion() {
    return testVersion;
  }

  public void setTestVersion(TestVersionEnum testVersion) {
    this.testVersion = testVersion;
  }

  public CompleteTestResults reasonForCreation(String reasonForCreation) {
    this.reasonForCreation = reasonForCreation;
    return this;
  }

   /**
   * Applicable only when updating/creating a test from VTM
   * @return reasonForCreation
  **/
  
  public String getReasonForCreation() {
    return reasonForCreation;
  }

  public void setReasonForCreation(String reasonForCreation) {
    this.reasonForCreation = reasonForCreation;
  }

  public CompleteTestResults createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Not sent from FE, calculated in the BE.
   * @return createdAt
  **/
  
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public CompleteTestResults createdByName(String createdByName) {
    this.createdByName = createdByName;
    return this;
  }

   /**
   * Applicable only when updating/creating a test from VTM
   * @return createdByName
  **/
  
  public String getCreatedByName() {
    return createdByName;
  }

  public void setCreatedByName(String createdByName) {
    this.createdByName = createdByName;
  }

  public CompleteTestResults createdById(String createdById) {
    this.createdById = createdById;
    return this;
  }

   /**
   * Applicable only when updating/creating a test from VTM
   * @return createdById
  **/
  
  public String getCreatedById() {
    return createdById;
  }

  public void setCreatedById(String createdById) {
    this.createdById = createdById;
  }

  public CompleteTestResults lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

   /**
   * Not sent from FE, calculated in the BE.
   * @return lastUpdatedAt
  **/
  
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }

  public CompleteTestResults lastUpdatedByName(String lastUpdatedByName) {
    this.lastUpdatedByName = lastUpdatedByName;
    return this;
  }

   /**
   * Applicable only when updating/creating a test from VTM
   * @return lastUpdatedByName
  **/
  
  public String getLastUpdatedByName() {
    return lastUpdatedByName;
  }

  public void setLastUpdatedByName(String lastUpdatedByName) {
    this.lastUpdatedByName = lastUpdatedByName;
  }

  public CompleteTestResults lastUpdatedById(String lastUpdatedById) {
    this.lastUpdatedById = lastUpdatedById;
    return this;
  }

   /**
   * Applicable only when updating/creating a test from VTM
   * @return lastUpdatedById
  **/
  
  public String getLastUpdatedById() {
    return lastUpdatedById;
  }

  public void setLastUpdatedById(String lastUpdatedById) {
    this.lastUpdatedById = lastUpdatedById;
  }

  public CompleteTestResults shouldEmailCertificate(String shouldEmailCertificate) {
    this.shouldEmailCertificate = shouldEmailCertificate;
    return this;
  }

   /**
   * Not sent from FE, calculated in BE. Applicable only when updating a test from VTM. Used to determine if a certificate should be emailed or not after an update.
   * @return shouldEmailCertificate
  **/
  
  public String getShouldEmailCertificate() {
    return shouldEmailCertificate;
  }

  public void setShouldEmailCertificate(String shouldEmailCertificate) {
    this.shouldEmailCertificate = shouldEmailCertificate;
  }

  public CompleteTestResults testStationName(String testStationName) {
    this.testStationName = testStationName;
    return this;
  }

   /**
   * Get testStationName
   * @return testStationName
  **/
  
  public String getTestStationName() {
    return testStationName;
  }

  public void setTestStationName(String testStationName) {
    this.testStationName = testStationName;
  }

  public CompleteTestResults testStationPNumber(String testStationPNumber) {
    this.testStationPNumber = testStationPNumber;
    return this;
  }

   /**
   * Get testStationPNumber
   * @return testStationPNumber
  **/
  
  public String getTestStationPNumber() {
    return testStationPNumber;
  }

  public void setTestStationPNumber(String testStationPNumber) {
    this.testStationPNumber = testStationPNumber;
  }

  public CompleteTestResults testStationType(TestStationTypeEnum testStationType) {
    this.testStationType = testStationType;
    return this;
  }

   /**
   * Get testStationType
   * @return testStationType
  **/
  
  public TestStationTypeEnum getTestStationType() {
    return testStationType;
  }

  public void setTestStationType(TestStationTypeEnum testStationType) {
    this.testStationType = testStationType;
  }

  public CompleteTestResults testerName(String testerName) {
    this.testerName = testerName;
    return this;
  }

   /**
   * Get testerName
   * @return testerName
  **/
  
  public String getTesterName() {
    return testerName;
  }

  public void setTesterName(String testerName) {
    this.testerName = testerName;
  }

  public CompleteTestResults testerStaffId(String testerStaffId) {
    this.testerStaffId = testerStaffId;
    return this;
  }

   /**
   * Get testerStaffId
   * @return testerStaffId
  **/
  
  public String getTesterStaffId() {
    return testerStaffId;
  }

  public void setTesterStaffId(String testerStaffId) {
    this.testerStaffId = testerStaffId;
  }

  public CompleteTestResults testResultId(String testResultId) {
    this.testResultId = testResultId;
    return this;
  }

   /**
   * Get testResultId
   * @return testResultId
  **/
  
  public String getTestResultId() {
    return testResultId;
  }

  public void setTestResultId(String testResultId) {
    this.testResultId = testResultId;
  }

  public CompleteTestResults testerEmailAddress(String testerEmailAddress) {
    this.testerEmailAddress = testerEmailAddress;
    return this;
  }

   /**
   * Get testerEmailAddress
   * @return testerEmailAddress
  **/
  
  public String getTesterEmailAddress() {
    return testerEmailAddress;
  }

  public void setTesterEmailAddress(String testerEmailAddress) {
    this.testerEmailAddress = testerEmailAddress;
  }

  public CompleteTestResults testStartTimestamp(OffsetDateTime testStartTimestamp) {
    this.testStartTimestamp = testStartTimestamp;
    return this;
  }

   /**
   * Get testStartTimestamp
   * @return testStartTimestamp
  **/
  
  public OffsetDateTime getTestStartTimestamp() {
    return testStartTimestamp;
  }

  public void setTestStartTimestamp(OffsetDateTime testStartTimestamp) {
    this.testStartTimestamp = testStartTimestamp;
  }

  public CompleteTestResults testEndTimestamp(OffsetDateTime testEndTimestamp) {
    this.testEndTimestamp = testEndTimestamp;
    return this;
  }

   /**
   * Get testEndTimestamp
   * @return testEndTimestamp
  **/
  
  public OffsetDateTime getTestEndTimestamp() {
    return testEndTimestamp;
  }

  public void setTestEndTimestamp(OffsetDateTime testEndTimestamp) {
    this.testEndTimestamp = testEndTimestamp;
  }

  public CompleteTestResults testStatus(TestStatusEnum testStatus) {
    this.testStatus = testStatus;
    return this;
  }

   /**
   * Get testStatus
   * @return testStatus
  **/
  
  public TestStatusEnum getTestStatus() {
    return testStatus;
  }

  public void setTestStatus(TestStatusEnum testStatus) {
    this.testStatus = testStatus;
  }

  public CompleteTestResults reasonForCancellation(String reasonForCancellation) {
    this.reasonForCancellation = reasonForCancellation;
    return this;
  }

   /**
   * Required for Cancelled tests. Nullable only for Submitted and Abandoned tests.
   * @return reasonForCancellation
  **/
  
  public String getReasonForCancellation() {
    return reasonForCancellation;
  }

  public void setReasonForCancellation(String reasonForCancellation) {
    this.reasonForCancellation = reasonForCancellation;
  }

  public CompleteTestResults vehicleClass(CompleteTestResultsVehicleClass vehicleClass) {
    this.vehicleClass = vehicleClass;
    return this;
  }

   /**
   * Get vehicleClass
   * @return vehicleClass
  **/
  
  public CompleteTestResultsVehicleClass getVehicleClass() {
    return vehicleClass;
  }

  public void setVehicleClass(CompleteTestResultsVehicleClass vehicleClass) {
    this.vehicleClass = vehicleClass;
  }

  public CompleteTestResults vehicleSubclass(List<String> vehicleSubclass) {
    this.vehicleSubclass = vehicleSubclass;
    return this;
  }

  public CompleteTestResults addVehicleSubclassItem(String vehicleSubclassItem) {
    if (this.vehicleSubclass == null) {
      this.vehicleSubclass = new ArrayList<String>();
    }
    this.vehicleSubclass.add(vehicleSubclassItem);
    return this;
  }

   /**
   * Used for car and lgv.
   * @return vehicleSubclass
  **/
  
  public List<String> getVehicleSubclass() {
    return vehicleSubclass;
  }

  public void setVehicleSubclass(List<String> vehicleSubclass) {
    this.vehicleSubclass = vehicleSubclass;
  }

  public CompleteTestResults vehicleType(VehicleTypeEnum vehicleType) {
    this.vehicleType = vehicleType;
    return this;
  }

   /**
   * Get vehicleType
   * @return vehicleType
  **/
  
  public VehicleTypeEnum getVehicleType() {
    return vehicleType;
  }

  public void setVehicleType(VehicleTypeEnum vehicleType) {
    this.vehicleType = vehicleType;
  }

  public CompleteTestResults numberOfSeats(BigDecimal numberOfSeats) {
    this.numberOfSeats = numberOfSeats;
    return this;
  }

   /**
   * mandatory for PSV only, not applicable for HGV and TRL
   * @return numberOfSeats
  **/
  
  public BigDecimal getNumberOfSeats() {
    return numberOfSeats;
  }

  public void setNumberOfSeats(BigDecimal numberOfSeats) {
    this.numberOfSeats = numberOfSeats;
  }

  public CompleteTestResults vehicleConfiguration(VehicleConfigurationEnum vehicleConfiguration) {
    this.vehicleConfiguration = vehicleConfiguration;
    return this;
  }

   /**
   * Get vehicleConfiguration
   * @return vehicleConfiguration
  **/
  
  public VehicleConfigurationEnum getVehicleConfiguration() {
    return vehicleConfiguration;
  }

  public void setVehicleConfiguration(VehicleConfigurationEnum vehicleConfiguration) {
    this.vehicleConfiguration = vehicleConfiguration;
  }

  public CompleteTestResults odometerReading(BigDecimal odometerReading) {
    this.odometerReading = odometerReading;
    return this;
  }

   /**
   * Nullable only for Cancelled tests &amp; not applicable to TRL
   * @return odometerReading
  **/
  
  public BigDecimal getOdometerReading() {
    return odometerReading;
  }

  public void setOdometerReading(BigDecimal odometerReading) {
    this.odometerReading = odometerReading;
  }

  public CompleteTestResults odometerReadingUnits(OdometerReadingUnitsEnum odometerReadingUnits) {
    this.odometerReadingUnits = odometerReadingUnits;
    return this;
  }

   /**
   * Nullable only for Cancelled tests &amp; not applicable to TRL
   * @return odometerReadingUnits
  **/
  
  public OdometerReadingUnitsEnum getOdometerReadingUnits() {
    return odometerReadingUnits;
  }

  public void setOdometerReadingUnits(OdometerReadingUnitsEnum odometerReadingUnits) {
    this.odometerReadingUnits = odometerReadingUnits;
  }

  public CompleteTestResults preparerId(String preparerId) {
    this.preparerId = preparerId;
    return this;
  }

   /**
   * Get preparerId
   * @return preparerId
  **/
  
  public String getPreparerId() {
    return preparerId;
  }

  public void setPreparerId(String preparerId) {
    this.preparerId = preparerId;
  }

  public CompleteTestResults preparerName(String preparerName) {
    this.preparerName = preparerName;
    return this;
  }

   /**
   * Get preparerName
   * @return preparerName
  **/
  
  public String getPreparerName() {
    return preparerName;
  }

  public void setPreparerName(String preparerName) {
    this.preparerName = preparerName;
  }

  public CompleteTestResults numberOfWheelsDriven(BigDecimal numberOfWheelsDriven) {
    this.numberOfWheelsDriven = numberOfWheelsDriven;
    return this;
  }

   /**
   * Get numberOfWheelsDriven
   * maximum: 9999
   * @return numberOfWheelsDriven
  **/
  
  public BigDecimal getNumberOfWheelsDriven() {
    return numberOfWheelsDriven;
  }

  public void setNumberOfWheelsDriven(BigDecimal numberOfWheelsDriven) {
    this.numberOfWheelsDriven = numberOfWheelsDriven;
  }

  public CompleteTestResults euVehicleCategory(EuVehicleCategoryEnum euVehicleCategory) {
    this.euVehicleCategory = euVehicleCategory;
    return this;
  }

   /**
   * Nullable only for Cancelled tests.
   * @return euVehicleCategory
  **/
  
  public EuVehicleCategoryEnum getEuVehicleCategory() {
    return euVehicleCategory;
  }

  public void setEuVehicleCategory(EuVehicleCategoryEnum euVehicleCategory) {
    this.euVehicleCategory = euVehicleCategory;
  }

  public CompleteTestResults countryOfRegistration(String countryOfRegistration) {
    this.countryOfRegistration = countryOfRegistration;
    return this;
  }

   /**
   * Nullable only for Cancelled tests.
   * @return countryOfRegistration
  **/
  
  public String getCountryOfRegistration() {
    return countryOfRegistration;
  }

  public void setCountryOfRegistration(String countryOfRegistration) {
    this.countryOfRegistration = countryOfRegistration;
  }

  public CompleteTestResults vehicleSize(VehicleSizeEnum vehicleSize) {
    this.vehicleSize = vehicleSize;
    return this;
  }

   /**
   * Mandatory for PSV only &amp; not applicable to HGV and TRL
   * @return vehicleSize
  **/
  
  public VehicleSizeEnum getVehicleSize() {
    return vehicleSize;
  }

  public void setVehicleSize(VehicleSizeEnum vehicleSize) {
    this.vehicleSize = vehicleSize;
  }

  public CompleteTestResults noOfAxles(BigDecimal noOfAxles) {
    this.noOfAxles = noOfAxles;
    return this;
  }

   /**
   * Get noOfAxles
   * maximum: 99
   * @return noOfAxles
  **/
  
  public BigDecimal getNoOfAxles() {
    return noOfAxles;
  }

  public void setNoOfAxles(BigDecimal noOfAxles) {
    this.noOfAxles = noOfAxles;
  }

  public CompleteTestResults regnDate(LocalDate regnDate) {
    this.regnDate = regnDate;
    return this;
  }

   /**
   * Used only for PSV and HGV
   * @return regnDate
  **/
  
  public LocalDate getRegnDate() {
    return regnDate;
  }

  public void setRegnDate(LocalDate regnDate) {
    this.regnDate = regnDate;
  }

  public CompleteTestResults firstUseDate(LocalDate firstUseDate) {
    this.firstUseDate = firstUseDate;
    return this;
  }

   /**
   * Used only for TRL
   * @return firstUseDate
  **/
  
  public LocalDate getFirstUseDate() {
    return firstUseDate;
  }

  public void setFirstUseDate(LocalDate firstUseDate) {
    this.firstUseDate = firstUseDate;
  }

  public CompleteTestResults testTypes(TestTypes testTypes) {
    this.testTypes = testTypes;
    return this;
  }

   /**
   * Get testTypes
   * @return testTypes
  **/
  
  public TestTypes getTestTypes() {
    return testTypes;
  }

  public void setTestTypes(TestTypes testTypes) {
    this.testTypes = testTypes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompleteTestResults completeTestResults = (CompleteTestResults) o;
    return Objects.equals(this.systemNumber, completeTestResults.systemNumber) &&
        Objects.equals(this.vrm, completeTestResults.vrm) &&
        Objects.equals(this.trailerId, completeTestResults.trailerId) &&
        Objects.equals(this.vin, completeTestResults.vin) &&
        Objects.equals(this.vehicleId, completeTestResults.vehicleId) &&
        Objects.equals(this.deletionFlag, completeTestResults.deletionFlag) &&
        Objects.equals(this.testHistory, completeTestResults.testHistory) &&
        Objects.equals(this.testVersion, completeTestResults.testVersion) &&
        Objects.equals(this.reasonForCreation, completeTestResults.reasonForCreation) &&
        Objects.equals(this.createdAt, completeTestResults.createdAt) &&
        Objects.equals(this.createdByName, completeTestResults.createdByName) &&
        Objects.equals(this.createdById, completeTestResults.createdById) &&
        Objects.equals(this.lastUpdatedAt, completeTestResults.lastUpdatedAt) &&
        Objects.equals(this.lastUpdatedByName, completeTestResults.lastUpdatedByName) &&
        Objects.equals(this.lastUpdatedById, completeTestResults.lastUpdatedById) &&
        Objects.equals(this.shouldEmailCertificate, completeTestResults.shouldEmailCertificate) &&
        Objects.equals(this.testStationName, completeTestResults.testStationName) &&
        Objects.equals(this.testStationPNumber, completeTestResults.testStationPNumber) &&
        Objects.equals(this.testStationType, completeTestResults.testStationType) &&
        Objects.equals(this.testerName, completeTestResults.testerName) &&
        Objects.equals(this.testerStaffId, completeTestResults.testerStaffId) &&
        Objects.equals(this.testResultId, completeTestResults.testResultId) &&
        Objects.equals(this.testerEmailAddress, completeTestResults.testerEmailAddress) &&
        Objects.equals(this.testStartTimestamp, completeTestResults.testStartTimestamp) &&
        Objects.equals(this.testEndTimestamp, completeTestResults.testEndTimestamp) &&
        Objects.equals(this.testStatus, completeTestResults.testStatus) &&
        Objects.equals(this.reasonForCancellation, completeTestResults.reasonForCancellation) &&
        Objects.equals(this.vehicleClass, completeTestResults.vehicleClass) &&
        Objects.equals(this.vehicleSubclass, completeTestResults.vehicleSubclass) &&
        Objects.equals(this.vehicleType, completeTestResults.vehicleType) &&
        Objects.equals(this.numberOfSeats, completeTestResults.numberOfSeats) &&
        Objects.equals(this.vehicleConfiguration, completeTestResults.vehicleConfiguration) &&
        Objects.equals(this.odometerReading, completeTestResults.odometerReading) &&
        Objects.equals(this.odometerReadingUnits, completeTestResults.odometerReadingUnits) &&
        Objects.equals(this.preparerId, completeTestResults.preparerId) &&
        Objects.equals(this.preparerName, completeTestResults.preparerName) &&
        Objects.equals(this.numberOfWheelsDriven, completeTestResults.numberOfWheelsDriven) &&
        Objects.equals(this.euVehicleCategory, completeTestResults.euVehicleCategory) &&
        Objects.equals(this.countryOfRegistration, completeTestResults.countryOfRegistration) &&
        Objects.equals(this.vehicleSize, completeTestResults.vehicleSize) &&
        Objects.equals(this.noOfAxles, completeTestResults.noOfAxles) &&
        Objects.equals(this.regnDate, completeTestResults.regnDate) &&
        Objects.equals(this.firstUseDate, completeTestResults.firstUseDate) &&
        Objects.equals(this.testTypes, completeTestResults.testTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(systemNumber, vrm, trailerId, vin, vehicleId, deletionFlag, testHistory, testVersion, reasonForCreation, createdAt, createdByName, createdById, lastUpdatedAt, lastUpdatedByName, lastUpdatedById, shouldEmailCertificate, testStationName, testStationPNumber, testStationType, testerName, testerStaffId, testResultId, testerEmailAddress, testStartTimestamp, testEndTimestamp, testStatus, reasonForCancellation, vehicleClass, vehicleSubclass, vehicleType, numberOfSeats, vehicleConfiguration, odometerReading, odometerReadingUnits, preparerId, preparerName, numberOfWheelsDriven, euVehicleCategory, countryOfRegistration, vehicleSize, noOfAxles, regnDate, firstUseDate, testTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompleteTestResults {\n");
    
    sb.append("    systemNumber: ").append(toIndentedString(systemNumber)).append("\n");
    sb.append("    vrm: ").append(toIndentedString(vrm)).append("\n");
    sb.append("    trailerId: ").append(toIndentedString(trailerId)).append("\n");
    sb.append("    vin: ").append(toIndentedString(vin)).append("\n");
    sb.append("    vehicleId: ").append(toIndentedString(vehicleId)).append("\n");
    sb.append("    deletionFlag: ").append(toIndentedString(deletionFlag)).append("\n");
    sb.append("    testHistory: ").append(toIndentedString(testHistory)).append("\n");
    sb.append("    testVersion: ").append(toIndentedString(testVersion)).append("\n");
    sb.append("    reasonForCreation: ").append(toIndentedString(reasonForCreation)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdByName: ").append(toIndentedString(createdByName)).append("\n");
    sb.append("    createdById: ").append(toIndentedString(createdById)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    lastUpdatedByName: ").append(toIndentedString(lastUpdatedByName)).append("\n");
    sb.append("    lastUpdatedById: ").append(toIndentedString(lastUpdatedById)).append("\n");
    sb.append("    shouldEmailCertificate: ").append(toIndentedString(shouldEmailCertificate)).append("\n");
    sb.append("    testStationName: ").append(toIndentedString(testStationName)).append("\n");
    sb.append("    testStationPNumber: ").append(toIndentedString(testStationPNumber)).append("\n");
    sb.append("    testStationType: ").append(toIndentedString(testStationType)).append("\n");
    sb.append("    testerName: ").append(toIndentedString(testerName)).append("\n");
    sb.append("    testerStaffId: ").append(toIndentedString(testerStaffId)).append("\n");
    sb.append("    testResultId: ").append(toIndentedString(testResultId)).append("\n");
    sb.append("    testerEmailAddress: ").append(toIndentedString(testerEmailAddress)).append("\n");
    sb.append("    testStartTimestamp: ").append(toIndentedString(testStartTimestamp)).append("\n");
    sb.append("    testEndTimestamp: ").append(toIndentedString(testEndTimestamp)).append("\n");
    sb.append("    testStatus: ").append(toIndentedString(testStatus)).append("\n");
    sb.append("    reasonForCancellation: ").append(toIndentedString(reasonForCancellation)).append("\n");
    sb.append("    vehicleClass: ").append(toIndentedString(vehicleClass)).append("\n");
    sb.append("    vehicleSubclass: ").append(toIndentedString(vehicleSubclass)).append("\n");
    sb.append("    vehicleType: ").append(toIndentedString(vehicleType)).append("\n");
    sb.append("    numberOfSeats: ").append(toIndentedString(numberOfSeats)).append("\n");
    sb.append("    vehicleConfiguration: ").append(toIndentedString(vehicleConfiguration)).append("\n");
    sb.append("    odometerReading: ").append(toIndentedString(odometerReading)).append("\n");
    sb.append("    odometerReadingUnits: ").append(toIndentedString(odometerReadingUnits)).append("\n");
    sb.append("    preparerId: ").append(toIndentedString(preparerId)).append("\n");
    sb.append("    preparerName: ").append(toIndentedString(preparerName)).append("\n");
    sb.append("    numberOfWheelsDriven: ").append(toIndentedString(numberOfWheelsDriven)).append("\n");
    sb.append("    euVehicleCategory: ").append(toIndentedString(euVehicleCategory)).append("\n");
    sb.append("    countryOfRegistration: ").append(toIndentedString(countryOfRegistration)).append("\n");
    sb.append("    vehicleSize: ").append(toIndentedString(vehicleSize)).append("\n");
    sb.append("    noOfAxles: ").append(toIndentedString(noOfAxles)).append("\n");
    sb.append("    regnDate: ").append(toIndentedString(regnDate)).append("\n");
    sb.append("    firstUseDate: ").append(toIndentedString(firstUseDate)).append("\n");
    sb.append("    testTypes: ").append(toIndentedString(testTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

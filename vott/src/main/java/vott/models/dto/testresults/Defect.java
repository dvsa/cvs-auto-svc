/*
 * Test Results Microservice
 * This is the API spec for capturing test results. These test result will be stored in the AWS DynamoDB database. Authorization details will be updated once we have confirmed the security scheme we are using.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: test@test.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package vott.models.dto.testresults;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Objects;

/**
 * Defect
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-04-13T13:44:54.508Z[GMT]")
public class Defect {
  @SerializedName("imNumber")
  private BigDecimal imNumber = null;

  @SerializedName("imDescription")
  private String imDescription = null;

  @SerializedName("additionalInformation")
  private DefectAdditionalInformation additionalInformation = null;

  @SerializedName("itemNumber")
  private BigDecimal itemNumber = null;

  @SerializedName("itemDescription")
  private String itemDescription = null;

  @SerializedName("deficiencyRef")
  private String deficiencyRef = null;

  @SerializedName("deficiencyId")
  private String deficiencyId = null;

  @SerializedName("deficiencySubId")
  private String deficiencySubId = null;

  /**
   * It is mandatory for both Submitted or Cancelled tests. It is only nullable in the DB for the migration purposes.
   */
  @JsonAdapter(DeficiencyCategoryEnum.Adapter.class)
  public enum DeficiencyCategoryEnum {
    ADVISORY("advisory"),
    DANGEROUS("dangerous"),
    MAJOR("major"),
    MINOR("minor");

    private String value;

    DeficiencyCategoryEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DeficiencyCategoryEnum fromValue(String text) {
      for (DeficiencyCategoryEnum b : DeficiencyCategoryEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DeficiencyCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeficiencyCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeficiencyCategoryEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DeficiencyCategoryEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("deficiencyCategory")
  private DeficiencyCategoryEnum deficiencyCategory = null;

  @SerializedName("deficiencyText")
  private String deficiencyText = null;

  @SerializedName("stdForProhibition")
  private Boolean stdForProhibition = null;

  @SerializedName("prs")
  private Boolean prs = null;

  @SerializedName("prohibitionIssued")
  private Boolean prohibitionIssued = null;

  public Defect imNumber(BigDecimal imNumber) {
    this.imNumber = imNumber;
    return this;
  }

   /**
   * Get imNumber
   * @return imNumber
  **/
  
  public BigDecimal getImNumber() {
    return imNumber;
  }

  public void setImNumber(BigDecimal imNumber) {
    this.imNumber = imNumber;
  }

  public Defect imDescription(String imDescription) {
    this.imDescription = imDescription;
    return this;
  }

   /**
   * Get imDescription
   * @return imDescription
  **/
  
  public String getImDescription() {
    return imDescription;
  }

  public void setImDescription(String imDescription) {
    this.imDescription = imDescription;
  }

  public Defect additionalInformation(DefectAdditionalInformation additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

   /**
   * Get additionalInformation
   * @return additionalInformation
  **/
  
  public DefectAdditionalInformation getAdditionalInformation() {
    return additionalInformation;
  }

  public void setAdditionalInformation(DefectAdditionalInformation additionalInformation) {
    this.additionalInformation = additionalInformation;
  }

  public Defect itemNumber(BigDecimal itemNumber) {
    this.itemNumber = itemNumber;
    return this;
  }

   /**
   * Get itemNumber
   * @return itemNumber
  **/
  
  public BigDecimal getItemNumber() {
    return itemNumber;
  }

  public void setItemNumber(BigDecimal itemNumber) {
    this.itemNumber = itemNumber;
  }

  public Defect itemDescription(String itemDescription) {
    this.itemDescription = itemDescription;
    return this;
  }

   /**
   * Get itemDescription
   * @return itemDescription
  **/
  
  public String getItemDescription() {
    return itemDescription;
  }

  public void setItemDescription(String itemDescription) {
    this.itemDescription = itemDescription;
  }

  public Defect deficiencyRef(String deficiencyRef) {
    this.deficiencyRef = deficiencyRef;
    return this;
  }

   /**
   * Get deficiencyRef
   * @return deficiencyRef
  **/
  
  public String getDeficiencyRef() {
    return deficiencyRef;
  }

  public void setDeficiencyRef(String deficiencyRef) {
    this.deficiencyRef = deficiencyRef;
  }

  public Defect deficiencyId(String deficiencyId) {
    this.deficiencyId = deficiencyId;
    return this;
  }

   /**
   * Get deficiencyId
   * @return deficiencyId
  **/
  
  public String getDeficiencyId() {
    return deficiencyId;
  }

  public void setDeficiencyId(String deficiencyId) {
    this.deficiencyId = deficiencyId;
  }

  public Defect deficiencySubId(String deficiencySubId) {
    this.deficiencySubId = deficiencySubId;
    return this;
  }

   /**
   * Get deficiencySubId
   * @return deficiencySubId
  **/
  
  public String getDeficiencySubId() {
    return deficiencySubId;
  }

  public void setDeficiencySubId(String deficiencySubId) {
    this.deficiencySubId = deficiencySubId;
  }

  public Defect deficiencyCategory(DeficiencyCategoryEnum deficiencyCategory) {
    this.deficiencyCategory = deficiencyCategory;
    return this;
  }

   /**
   * It is mandatory for both Submitted or Cancelled tests. It is only nullable in the DB for the migration purposes.
   * @return deficiencyCategory
  **/
  
  public DeficiencyCategoryEnum getDeficiencyCategory() {
    return deficiencyCategory;
  }

  public void setDeficiencyCategory(DeficiencyCategoryEnum deficiencyCategory) {
    this.deficiencyCategory = deficiencyCategory;
  }

  public Defect deficiencyText(String deficiencyText) {
    this.deficiencyText = deficiencyText;
    return this;
  }

   /**
   * Get deficiencyText
   * @return deficiencyText
  **/
  
  public String getDeficiencyText() {
    return deficiencyText;
  }

  public void setDeficiencyText(String deficiencyText) {
    this.deficiencyText = deficiencyText;
  }

  public Defect stdForProhibition(Boolean stdForProhibition) {
    this.stdForProhibition = stdForProhibition;
    return this;
  }

   /**
   * Get stdForProhibition
   * @return stdForProhibition
  **/
  
  public Boolean isStdForProhibition() {
    return stdForProhibition;
  }

  public void setStdForProhibition(Boolean stdForProhibition) {
    this.stdForProhibition = stdForProhibition;
  }

  public Defect prs(Boolean prs) {
    this.prs = prs;
    return this;
  }

   /**
   * Get prs
   * @return prs
  **/
  
  public Boolean isPrs() {
    return prs;
  }

  public void setPrs(Boolean prs) {
    this.prs = prs;
  }

  public Defect prohibitionIssued(Boolean prohibitionIssued) {
    this.prohibitionIssued = prohibitionIssued;
    return this;
  }

   /**
   * Get prohibitionIssued
   * @return prohibitionIssued
  **/
  
  public Boolean isProhibitionIssued() {
    return prohibitionIssued;
  }

  public void setProhibitionIssued(Boolean prohibitionIssued) {
    this.prohibitionIssued = prohibitionIssued;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Defect defect = (Defect) o;
    return Objects.equals(this.imNumber, defect.imNumber) &&
        Objects.equals(this.imDescription, defect.imDescription) &&
        Objects.equals(this.additionalInformation, defect.additionalInformation) &&
        Objects.equals(this.itemNumber, defect.itemNumber) &&
        Objects.equals(this.itemDescription, defect.itemDescription) &&
        Objects.equals(this.deficiencyRef, defect.deficiencyRef) &&
        Objects.equals(this.deficiencyId, defect.deficiencyId) &&
        Objects.equals(this.deficiencySubId, defect.deficiencySubId) &&
        Objects.equals(this.deficiencyCategory, defect.deficiencyCategory) &&
        Objects.equals(this.deficiencyText, defect.deficiencyText) &&
        Objects.equals(this.stdForProhibition, defect.stdForProhibition) &&
        Objects.equals(this.prs, defect.prs) &&
        Objects.equals(this.prohibitionIssued, defect.prohibitionIssued);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imNumber, imDescription, additionalInformation, itemNumber, itemDescription, deficiencyRef, deficiencyId, deficiencySubId, deficiencyCategory, deficiencyText, stdForProhibition, prs, prohibitionIssued);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Defect {\n");
    
    sb.append("    imNumber: ").append(toIndentedString(imNumber)).append("\n");
    sb.append("    imDescription: ").append(toIndentedString(imDescription)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    itemNumber: ").append(toIndentedString(itemNumber)).append("\n");
    sb.append("    itemDescription: ").append(toIndentedString(itemDescription)).append("\n");
    sb.append("    deficiencyRef: ").append(toIndentedString(deficiencyRef)).append("\n");
    sb.append("    deficiencyId: ").append(toIndentedString(deficiencyId)).append("\n");
    sb.append("    deficiencySubId: ").append(toIndentedString(deficiencySubId)).append("\n");
    sb.append("    deficiencyCategory: ").append(toIndentedString(deficiencyCategory)).append("\n");
    sb.append("    deficiencyText: ").append(toIndentedString(deficiencyText)).append("\n");
    sb.append("    stdForProhibition: ").append(toIndentedString(stdForProhibition)).append("\n");
    sb.append("    prs: ").append(toIndentedString(prs)).append("\n");
    sb.append("    prohibitionIssued: ").append(toIndentedString(prohibitionIssued)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
